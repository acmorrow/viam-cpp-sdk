// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/data/v1/data.proto

#include "app/data/v1/data.pb.h"
#include "app/data/v1/data.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace app {
namespace data {
namespace v1 {

static const char* DataService_method_names[] = {
  "/viam.app.data.v1.DataService/TabularDataByFilter",
  "/viam.app.data.v1.DataService/BinaryDataByFilter",
  "/viam.app.data.v1.DataService/BinaryDataByIDs",
};

std::unique_ptr< DataService::Stub> DataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataService::Stub> stub(new DataService::Stub(channel, options));
  return stub;
}

DataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TabularDataByFilter_(DataService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BinaryDataByFilter_(DataService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BinaryDataByIDs_(DataService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataService::Stub::TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::viam::app::data::v1::TabularDataByFilterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TabularDataByFilter_, context, request, response);
}

void DataService::Stub::async::TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TabularDataByFilter_, context, request, response, std::move(f));
}

void DataService::Stub::async::TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TabularDataByFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>* DataService::Stub::PrepareAsyncTabularDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::app::data::v1::TabularDataByFilterResponse, ::viam::app::data::v1::TabularDataByFilterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TabularDataByFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>* DataService::Stub::AsyncTabularDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTabularDataByFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataService::Stub::BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::viam::app::data::v1::BinaryDataByFilterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BinaryDataByFilter_, context, request, response);
}

void DataService::Stub::async::BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryDataByFilter_, context, request, response, std::move(f));
}

void DataService::Stub::async::BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryDataByFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>* DataService::Stub::PrepareAsyncBinaryDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::app::data::v1::BinaryDataByFilterResponse, ::viam::app::data::v1::BinaryDataByFilterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BinaryDataByFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>* DataService::Stub::AsyncBinaryDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBinaryDataByFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataService::Stub::BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::viam::app::data::v1::BinaryDataByIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BinaryDataByIDs_, context, request, response);
}

void DataService::Stub::async::BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryDataByIDs_, context, request, response, std::move(f));
}

void DataService::Stub::async::BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryDataByIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>* DataService::Stub::PrepareAsyncBinaryDataByIDsRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::app::data::v1::BinaryDataByIDsResponse, ::viam::app::data::v1::BinaryDataByIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BinaryDataByIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>* DataService::Stub::AsyncBinaryDataByIDsRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBinaryDataByIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataService::Service, ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::app::data::v1::TabularDataByFilterRequest* req,
             ::viam::app::data::v1::TabularDataByFilterResponse* resp) {
               return service->TabularDataByFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataService::Service, ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::app::data::v1::BinaryDataByFilterRequest* req,
             ::viam::app::data::v1::BinaryDataByFilterResponse* resp) {
               return service->BinaryDataByFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataService::Service, ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::app::data::v1::BinaryDataByIDsRequest* req,
             ::viam::app::data::v1::BinaryDataByIDsResponse* resp) {
               return service->BinaryDataByIDs(ctx, req, resp);
             }, this)));
}

DataService::Service::~Service() {
}

::grpc::Status DataService::Service::TabularDataByFilter(::grpc::ServerContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataService::Service::BinaryDataByFilter(::grpc::ServerContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataService::Service::BinaryDataByIDs(::grpc::ServerContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace app
}  // namespace data
}  // namespace v1

