// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/data/v1/data.proto
#ifndef GRPC_app_2fdata_2fv1_2fdata_2eproto__INCLUDED
#define GRPC_app_2fdata_2fv1_2fdata_2eproto__INCLUDED

#include "app/data/v1/data.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace viam {
namespace app {
namespace data {
namespace v1 {

// DataService is used to query robot data.
class DataService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.data.v1.DataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // TabularDataByFilter queries tabular data and metadata based on given filters.
    virtual ::grpc::Status TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::viam::app::data::v1::TabularDataByFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::TabularDataByFilterResponse>> AsyncTabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::TabularDataByFilterResponse>>(AsyncTabularDataByFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::TabularDataByFilterResponse>> PrepareAsyncTabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::TabularDataByFilterResponse>>(PrepareAsyncTabularDataByFilterRaw(context, request, cq));
    }
    // BinaryDataByFilter queries binary data and metadata based on given filters.
    virtual ::grpc::Status BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::viam::app::data::v1::BinaryDataByFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByFilterResponse>> AsyncBinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByFilterResponse>>(AsyncBinaryDataByFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByFilterResponse>> PrepareAsyncBinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByFilterResponse>>(PrepareAsyncBinaryDataByFilterRaw(context, request, cq));
    }
    // BinaryDataByIDs queries binary data and metadata based on given IDs.
    virtual ::grpc::Status BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::viam::app::data::v1::BinaryDataByIDsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByIDsResponse>> AsyncBinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByIDsResponse>>(AsyncBinaryDataByIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByIDsResponse>> PrepareAsyncBinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByIDsResponse>>(PrepareAsyncBinaryDataByIDsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // TabularDataByFilter queries tabular data and metadata based on given filters.
      virtual void TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BinaryDataByFilter queries binary data and metadata based on given filters.
      virtual void BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BinaryDataByIDs queries binary data and metadata based on given IDs.
      virtual void BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::TabularDataByFilterResponse>* AsyncTabularDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::TabularDataByFilterResponse>* PrepareAsyncTabularDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByFilterResponse>* AsyncBinaryDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByFilterResponse>* PrepareAsyncBinaryDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByIDsResponse>* AsyncBinaryDataByIDsRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::data::v1::BinaryDataByIDsResponse>* PrepareAsyncBinaryDataByIDsRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::viam::app::data::v1::TabularDataByFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>> AsyncTabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>>(AsyncTabularDataByFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>> PrepareAsyncTabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>>(PrepareAsyncTabularDataByFilterRaw(context, request, cq));
    }
    ::grpc::Status BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::viam::app::data::v1::BinaryDataByFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>> AsyncBinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>>(AsyncBinaryDataByFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>> PrepareAsyncBinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>>(PrepareAsyncBinaryDataByFilterRaw(context, request, cq));
    }
    ::grpc::Status BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::viam::app::data::v1::BinaryDataByIDsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>> AsyncBinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>>(AsyncBinaryDataByIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>> PrepareAsyncBinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>>(PrepareAsyncBinaryDataByIDsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void TabularDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void BinaryDataByFilter(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response, std::function<void(::grpc::Status)>) override;
      void BinaryDataByIDs(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>* AsyncTabularDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::TabularDataByFilterResponse>* PrepareAsyncTabularDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>* AsyncBinaryDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByFilterResponse>* PrepareAsyncBinaryDataByFilterRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>* AsyncBinaryDataByIDsRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::data::v1::BinaryDataByIDsResponse>* PrepareAsyncBinaryDataByIDsRaw(::grpc::ClientContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TabularDataByFilter_;
    const ::grpc::internal::RpcMethod rpcmethod_BinaryDataByFilter_;
    const ::grpc::internal::RpcMethod rpcmethod_BinaryDataByIDs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // TabularDataByFilter queries tabular data and metadata based on given filters.
    virtual ::grpc::Status TabularDataByFilter(::grpc::ServerContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response);
    // BinaryDataByFilter queries binary data and metadata based on given filters.
    virtual ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response);
    // BinaryDataByIDs queries binary data and metadata based on given IDs.
    virtual ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TabularDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TabularDataByFilter() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TabularDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TabularDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTabularDataByFilter(::grpc::ServerContext* context, ::viam::app::data::v1::TabularDataByFilterRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::data::v1::TabularDataByFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BinaryDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BinaryDataByFilter() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BinaryDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBinaryDataByFilter(::grpc::ServerContext* context, ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::data::v1::BinaryDataByFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BinaryDataByIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BinaryDataByIDs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BinaryDataByIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBinaryDataByIDs(::grpc::ServerContext* context, ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::data::v1::BinaryDataByIDsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TabularDataByFilter<WithAsyncMethod_BinaryDataByFilter<WithAsyncMethod_BinaryDataByIDs<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TabularDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TabularDataByFilter() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::data::v1::TabularDataByFilterRequest* request, ::viam::app::data::v1::TabularDataByFilterResponse* response) { return this->TabularDataByFilter(context, request, response); }));}
    void SetMessageAllocatorFor_TabularDataByFilter(
        ::grpc::MessageAllocator< ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TabularDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TabularDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TabularDataByFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BinaryDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BinaryDataByFilter() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::data::v1::BinaryDataByFilterRequest* request, ::viam::app::data::v1::BinaryDataByFilterResponse* response) { return this->BinaryDataByFilter(context, request, response); }));}
    void SetMessageAllocatorFor_BinaryDataByFilter(
        ::grpc::MessageAllocator< ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BinaryDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BinaryDataByFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BinaryDataByIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BinaryDataByIDs() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::data::v1::BinaryDataByIDsRequest* request, ::viam::app::data::v1::BinaryDataByIDsResponse* response) { return this->BinaryDataByIDs(context, request, response); }));}
    void SetMessageAllocatorFor_BinaryDataByIDs(
        ::grpc::MessageAllocator< ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BinaryDataByIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BinaryDataByIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_TabularDataByFilter<WithCallbackMethod_BinaryDataByFilter<WithCallbackMethod_BinaryDataByIDs<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TabularDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TabularDataByFilter() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TabularDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TabularDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BinaryDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BinaryDataByFilter() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BinaryDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BinaryDataByIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BinaryDataByIDs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BinaryDataByIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TabularDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TabularDataByFilter() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TabularDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TabularDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTabularDataByFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BinaryDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BinaryDataByFilter() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BinaryDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBinaryDataByFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BinaryDataByIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BinaryDataByIDs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BinaryDataByIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBinaryDataByIDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TabularDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TabularDataByFilter() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TabularDataByFilter(context, request, response); }));
    }
    ~WithRawCallbackMethod_TabularDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TabularDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TabularDataByFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BinaryDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BinaryDataByFilter() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BinaryDataByFilter(context, request, response); }));
    }
    ~WithRawCallbackMethod_BinaryDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BinaryDataByFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BinaryDataByIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BinaryDataByIDs() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BinaryDataByIDs(context, request, response); }));
    }
    ~WithRawCallbackMethod_BinaryDataByIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BinaryDataByIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TabularDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TabularDataByFilter() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::data::v1::TabularDataByFilterRequest, ::viam::app::data::v1::TabularDataByFilterResponse>* streamer) {
                       return this->StreamedTabularDataByFilter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TabularDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TabularDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::TabularDataByFilterRequest* /*request*/, ::viam::app::data::v1::TabularDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTabularDataByFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::data::v1::TabularDataByFilterRequest,::viam::app::data::v1::TabularDataByFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BinaryDataByFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BinaryDataByFilter() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::data::v1::BinaryDataByFilterRequest, ::viam::app::data::v1::BinaryDataByFilterResponse>* streamer) {
                       return this->StreamedBinaryDataByFilter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BinaryDataByFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BinaryDataByFilter(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByFilterRequest* /*request*/, ::viam::app::data::v1::BinaryDataByFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBinaryDataByFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::data::v1::BinaryDataByFilterRequest,::viam::app::data::v1::BinaryDataByFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BinaryDataByIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BinaryDataByIDs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::data::v1::BinaryDataByIDsRequest, ::viam::app::data::v1::BinaryDataByIDsResponse>* streamer) {
                       return this->StreamedBinaryDataByIDs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BinaryDataByIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BinaryDataByIDs(::grpc::ServerContext* /*context*/, const ::viam::app::data::v1::BinaryDataByIDsRequest* /*request*/, ::viam::app::data::v1::BinaryDataByIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBinaryDataByIDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::data::v1::BinaryDataByIDsRequest,::viam::app::data::v1::BinaryDataByIDsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TabularDataByFilter<WithStreamedUnaryMethod_BinaryDataByFilter<WithStreamedUnaryMethod_BinaryDataByIDs<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TabularDataByFilter<WithStreamedUnaryMethod_BinaryDataByFilter<WithStreamedUnaryMethod_BinaryDataByIDs<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fdata_2fv1_2fdata_2eproto__INCLUDED
