# Copyright 2023 Viam Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

find_package(gRPC CONFIG REQUIRED)
find_package(Boost REQUIRED
  COMPONENTS log
)

# The user can select whether to use the prebuilt proto files under the `gen` directory,
# or to dynamically regenerate them as part of the build. In the latter mode, additional
# targets are defined that will copy the newly generated protos back to the source directory
# so they can be committed:
#
# cmake ... -DVIAMCPPSDK_USE_DYNAMIC_PROTOS=ON
# [make|ninja|...] update-static-protos
#
option(VIAMCPPSDK_USE_DYNAMIC_PROTOS "Regenerate protos as part of building (network access required)" OFF)

set(PROTO_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR})

if (VIAMCPPSDK_USE_DYNAMIC_PROTOS)

  set(PROTO_GEN_DIR ${CMAKE_CURRENT_BINARY_DIR})

  configure_file(
    buf.gen.yaml.in
    buf.gen.yaml
  )

  add_custom_command(
    OUTPUT
    # Unfortunately, there isn't a good way to know in advance what
    # files will be generated by invoking `buf generate`.  Instead, we
    # just list the files here that we know we need in the
    # `add_library` call below. But we will find in practice that more
    # files are generated.
    #
    # TODO: We reiterate this list below in `add_library`. Can we DRY
    # it sanely? We would needd to filter out (or add in) the headers.

    # This list is needed for the core library.
    ${PROTO_GEN_DIR}/gen/common/v1/common.grpc.pb.cc
    ${PROTO_GEN_DIR}/gen/common/v1/common.grpc.pb.h
    ${PROTO_GEN_DIR}/gen/common/v1/common.pb.cc
    ${PROTO_GEN_DIR}/gen/common/v1/common.pb.h
    ${PROTO_GEN_DIR}/gen/google/api/annotations.pb.cc
    ${PROTO_GEN_DIR}/gen/google/api/annotations.pb.h
    ${PROTO_GEN_DIR}/gen/google/api/http.pb.cc
    ${PROTO_GEN_DIR}/gen/google/api/http.pb.h
    ${PROTO_GEN_DIR}/gen/robot/v1/robot.grpc.pb.cc
    ${PROTO_GEN_DIR}/gen/robot/v1/robot.grpc.pb.h
    ${PROTO_GEN_DIR}/gen/robot/v1/robot.pb.cc
    ${PROTO_GEN_DIR}/gen/robot/v1/robot.pb.h

    # These are needed for `echo` example, which is awkward. These can
    # probably be removed if that example is pulled.
    ${PROTO_GEN_DIR}/gen/proto/rpc/examples/echo/v1/echo.grpc.pb.cc
    ${PROTO_GEN_DIR}/gen/proto/rpc/examples/echo/v1/echo.grpc.pb.h
    ${PROTO_GEN_DIR}/gen/proto/rpc/examples/echo/v1/echo.pb.cc
    ${PROTO_GEN_DIR}/gen/proto/rpc/examples/echo/v1/echo.pb.h

    COMMAND buf generate buf.build/viamrobotics/goutils --template buf.gen.yaml
    COMMAND buf generate buf.build/googleapis/googleapis --template buf.gen.yaml --path google/rpc --path google/api
    COMMAND buf generate buf.build/viamrobotics/api --template buf.gen.yaml --path common,component,robot,service,module
    MAIN_DEPENDENCY buf.gen.yaml
  )

  add_custom_target(
    update-static-protos
    # This must be one of the files listed in `add_custom_command` above,
    # but it doesn't matter which one, we just need to have a dependency edge
    # into the files produced by that command.
    #
    # TODO: If we DRY as suggested above, this could just be the first list item.
    #
    DEPENDS gen/common/v1/common.grpc.pb.cc
  )

  add_custom_command(
    TARGET update-static-protos
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${PROTO_GEN_DIR}/gen ${CMAKE_SOURCE_DIR}/src/gen
  )
endif(VIAMCPPSDK_USE_DYNAMIC_PROTOS)

# I dislike exporting values via `CACHE` but for now we need this
# state over in the `examples` directory. Hopefully when we do some
# physical refactoring that can be eliminated.
set(PROTO_GEN_DIR ${PROTO_GEN_DIR} CACHE INTERNAL "")


# Declare the viamcpp library, and attach sources,
# headers for installation
add_library(viamcpp)

target_sources(viamcpp
  PRIVATE
    ${PROTO_GEN_DIR}/gen/common/v1/common.grpc.pb.cc
    ${PROTO_GEN_DIR}/gen/common/v1/common.pb.cc
    ${PROTO_GEN_DIR}/gen/google/api/annotations.pb.cc
    ${PROTO_GEN_DIR}/gen/google/api/http.pb.cc
    ${PROTO_GEN_DIR}/gen/robot/v1/robot.pb.cc
    ${PROTO_GEN_DIR}/gen/robot/v1/robot.grpc.pb.cc
    common/proto_type.cpp
    common/utils.cpp
    components/component_base.cpp
    components/resource_manager.cpp
    registry/registry.cpp
    robot/client.cpp
    rpc/dial.cpp
  PUBLIC FILE_SET viamcpp_public_includes TYPE HEADERS
    FILES
      common/proto_type.hpp
      common/utils.hpp
      components/component_base.hpp
      components/resource_manager.hpp
      components/service_base.hpp
      registry/registry.hpp
      robot/client.hpp
      robot/service.hpp
      rpc/dial.hpp
  PUBLIC FILE_SET viamcpp_public_pb_includes TYPE HEADERS
    BASE_DIRS
      ${CMAKE_CURRENT_BINARY_DIR}/gen
    FILES
      ${PROTO_GEN_DIR}/gen/google/api/annotations.pb.h
      ${PROTO_GEN_DIR}/gen/google/api/http.pb.h
      ${PROTO_GEN_DIR}/gen/common/v1/common.pb.h
      ${PROTO_GEN_DIR}/gen/robot/v1/robot.grpc.pb.h
      ${PROTO_GEN_DIR}/gen/robot/v1/robot.pb.h
  )

target_include_directories(viamcpp
  PUBLIC ${PROJECT_SOURCE_DIR}/src
  PUBLIC ${PROTO_GEN_DIR}/gen
)

target_link_libraries(viamcpp
  PUBLIC gRPC::grpc++
  PRIVATE ${Boost_LOG_LIBRARY}
  PRIVATE viam_rust_utils
)

install(
  TARGETS viamcpp
  LIBRARY COMPONENT runtime
  FILE_SET viamcpp_public_includes COMPONENT dev
  FILE_SET viamcpp_public_pb_includes COMPONENT dev
)
