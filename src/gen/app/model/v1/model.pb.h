// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/model/v1/model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fmodel_2fv1_2fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fmodel_2fv1_2fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fmodel_2fv1_2fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fmodel_2fv1_2fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto;
namespace viam {
namespace app {
namespace model {
namespace v1 {
class DeleteMetadata;
struct DeleteMetadataDefaultTypeInternal;
extern DeleteMetadataDefaultTypeInternal _DeleteMetadata_default_instance_;
class DeleteRequest;
struct DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
struct DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class DeployMetadata;
struct DeployMetadataDefaultTypeInternal;
extern DeployMetadataDefaultTypeInternal _DeployMetadata_default_instance_;
class DeployRequest;
struct DeployRequestDefaultTypeInternal;
extern DeployRequestDefaultTypeInternal _DeployRequest_default_instance_;
class DeployResponse;
struct DeployResponseDefaultTypeInternal;
extern DeployResponseDefaultTypeInternal _DeployResponse_default_instance_;
class FileData;
struct FileDataDefaultTypeInternal;
extern FileDataDefaultTypeInternal _FileData_default_instance_;
class SyncedModel;
struct SyncedModelDefaultTypeInternal;
extern SyncedModelDefaultTypeInternal _SyncedModel_default_instance_;
class UploadMetadata;
struct UploadMetadataDefaultTypeInternal;
extern UploadMetadataDefaultTypeInternal _UploadMetadata_default_instance_;
class UploadRequest;
struct UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
class UploadResponse;
struct UploadResponseDefaultTypeInternal;
extern UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::model::v1::DeleteMetadata* Arena::CreateMaybeMessage<::viam::app::model::v1::DeleteMetadata>(Arena*);
template<> ::viam::app::model::v1::DeleteRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::DeleteRequest>(Arena*);
template<> ::viam::app::model::v1::DeleteResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::DeleteResponse>(Arena*);
template<> ::viam::app::model::v1::DeployMetadata* Arena::CreateMaybeMessage<::viam::app::model::v1::DeployMetadata>(Arena*);
template<> ::viam::app::model::v1::DeployRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::DeployRequest>(Arena*);
template<> ::viam::app::model::v1::DeployResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::DeployResponse>(Arena*);
template<> ::viam::app::model::v1::FileData* Arena::CreateMaybeMessage<::viam::app::model::v1::FileData>(Arena*);
template<> ::viam::app::model::v1::SyncedModel* Arena::CreateMaybeMessage<::viam::app::model::v1::SyncedModel>(Arena*);
template<> ::viam::app::model::v1::UploadMetadata* Arena::CreateMaybeMessage<::viam::app::model::v1::UploadMetadata>(Arena*);
template<> ::viam::app::model::v1::UploadRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::UploadRequest>(Arena*);
template<> ::viam::app::model::v1::UploadResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::UploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace model {
namespace v1 {

enum Status : int {
  UNSPECIFIED = 0,
  FAIL = 1,
  OK = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = UNSPECIFIED;
constexpr Status Status_MAX = OK;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class FileData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.FileData) */ {
 public:
  inline FileData() : FileData(nullptr) {}
  ~FileData() override;
  explicit PROTOBUF_CONSTEXPR FileData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileData(const FileData& from);
  FileData(FileData&& from) noexcept
    : FileData() {
    *this = ::std::move(from);
  }

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileData& operator=(FileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileData* internal_default_instance() {
    return reinterpret_cast<const FileData*>(
               &_FileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileData& a, FileData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileData& from) {
    FileData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.FileData";
  }
  protected:
  explicit FileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.FileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UploadMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.UploadMetadata) */ {
 public:
  inline UploadMetadata() : UploadMetadata(nullptr) {}
  ~UploadMetadata() override;
  explicit PROTOBUF_CONSTEXPR UploadMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadMetadata(const UploadMetadata& from);
  UploadMetadata(UploadMetadata&& from) noexcept
    : UploadMetadata() {
    *this = ::std::move(from);
  }

  inline UploadMetadata& operator=(const UploadMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMetadata& operator=(UploadMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadMetadata* internal_default_instance() {
    return reinterpret_cast<const UploadMetadata*>(
               &_UploadMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadMetadata& a, UploadMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadMetadata& from) {
    UploadMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.UploadMetadata";
  }
  protected:
  explicit UploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kAssociatedDatasetFieldNumber = 3,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string associated_dataset = 3 [json_name = "associatedDataset"];
  void clear_associated_dataset();
  const std::string& associated_dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_dataset();
  PROTOBUF_NODISCARD std::string* release_associated_dataset();
  void set_allocated_associated_dataset(std::string* associated_dataset);
  private:
  const std::string& _internal_associated_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_dataset(const std::string& value);
  std::string* _internal_mutable_associated_dataset();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.UploadMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_dataset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.UploadRequest) */ {
 public:
  inline UploadRequest() : UploadRequest(nullptr) {}
  ~UploadRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadRequest(const UploadRequest& from);
  UploadRequest(UploadRequest&& from) noexcept
    : UploadRequest() {
    *this = ::std::move(from);
  }

  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadRequest& default_instance() {
    return *internal_default_instance();
  }
  enum UploadPacketCase {
    kMetadata = 1,
    kFileContents = 2,
    UPLOAD_PACKET_NOT_SET = 0,
  };

  static inline const UploadRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRequest*>(
               &_UploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadRequest& a, UploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadRequest& from) {
    UploadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.UploadRequest";
  }
  protected:
  explicit UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kFileContentsFieldNumber = 2,
  };
  // .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::viam::app::model::v1::UploadMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::app::model::v1::UploadMetadata* release_metadata();
  ::viam::app::model::v1::UploadMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::app::model::v1::UploadMetadata* metadata);
  private:
  const ::viam::app::model::v1::UploadMetadata& _internal_metadata() const;
  ::viam::app::model::v1::UploadMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::viam::app::model::v1::UploadMetadata* metadata);
  ::viam::app::model::v1::UploadMetadata* unsafe_arena_release_metadata();

  // .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
  bool has_file_contents() const;
  private:
  bool _internal_has_file_contents() const;
  public:
  void clear_file_contents();
  const ::viam::app::model::v1::FileData& file_contents() const;
  PROTOBUF_NODISCARD ::viam::app::model::v1::FileData* release_file_contents();
  ::viam::app::model::v1::FileData* mutable_file_contents();
  void set_allocated_file_contents(::viam::app::model::v1::FileData* file_contents);
  private:
  const ::viam::app::model::v1::FileData& _internal_file_contents() const;
  ::viam::app::model::v1::FileData* _internal_mutable_file_contents();
  public:
  void unsafe_arena_set_allocated_file_contents(
      ::viam::app::model::v1::FileData* file_contents);
  ::viam::app::model::v1::FileData* unsafe_arena_release_file_contents();

  void clear_upload_packet();
  UploadPacketCase upload_packet_case() const;
  // @@protoc_insertion_point(class_scope:viam.app.model.v1.UploadRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_file_contents();

  inline bool has_upload_packet() const;
  inline void clear_has_upload_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union UploadPacketUnion {
      constexpr UploadPacketUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::viam::app::model::v1::UploadMetadata* metadata_;
      ::viam::app::model::v1::FileData* file_contents_;
    } upload_packet_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeleteMetadata) */ {
 public:
  inline DeleteMetadata() : DeleteMetadata(nullptr) {}
  ~DeleteMetadata() override;
  explicit PROTOBUF_CONSTEXPR DeleteMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMetadata(const DeleteMetadata& from);
  DeleteMetadata(DeleteMetadata&& from) noexcept
    : DeleteMetadata() {
    *this = ::std::move(from);
  }

  inline DeleteMetadata& operator=(const DeleteMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMetadata& operator=(DeleteMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMetadata* internal_default_instance() {
    return reinterpret_cast<const DeleteMetadata*>(
               &_DeleteMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteMetadata& a, DeleteMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMetadata& from) {
    DeleteMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeleteMetadata";
  }
  protected:
  explicit DeleteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeleteMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {}
  ~DeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRequest& from) {
    DeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .viam.app.model.v1.DeleteMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::viam::app::model::v1::DeleteMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::app::model::v1::DeleteMetadata* release_metadata();
  ::viam::app::model::v1::DeleteMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::app::model::v1::DeleteMetadata* metadata);
  private:
  const ::viam::app::model::v1::DeleteMetadata& _internal_metadata() const;
  ::viam::app::model::v1::DeleteMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::viam::app::model::v1::DeleteMetadata* metadata);
  ::viam::app::model::v1::DeleteMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::app::model::v1::DeleteMetadata* metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeployMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeployMetadata) */ {
 public:
  inline DeployMetadata() : DeployMetadata(nullptr) {}
  ~DeployMetadata() override;
  explicit PROTOBUF_CONSTEXPR DeployMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployMetadata(const DeployMetadata& from);
  DeployMetadata(DeployMetadata&& from) noexcept
    : DeployMetadata() {
    *this = ::std::move(from);
  }

  inline DeployMetadata& operator=(const DeployMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployMetadata& operator=(DeployMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployMetadata* internal_default_instance() {
    return reinterpret_cast<const DeployMetadata*>(
               &_DeployMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeployMetadata& a, DeployMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployMetadata& from) {
    DeployMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeployMetadata";
  }
  protected:
  explicit DeployMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
  };
  // string model_name = 1 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeployMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeployRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeployRequest) */ {
 public:
  inline DeployRequest() : DeployRequest(nullptr) {}
  ~DeployRequest() override;
  explicit PROTOBUF_CONSTEXPR DeployRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployRequest(const DeployRequest& from);
  DeployRequest(DeployRequest&& from) noexcept
    : DeployRequest() {
    *this = ::std::move(from);
  }

  inline DeployRequest& operator=(const DeployRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployRequest& operator=(DeployRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployRequest* internal_default_instance() {
    return reinterpret_cast<const DeployRequest*>(
               &_DeployRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeployRequest& a, DeployRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployRequest& from) {
    DeployRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeployRequest";
  }
  protected:
  explicit DeployRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .viam.app.model.v1.DeployMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::viam::app::model::v1::DeployMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::app::model::v1::DeployMetadata* release_metadata();
  ::viam::app::model::v1::DeployMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::app::model::v1::DeployMetadata* metadata);
  private:
  const ::viam::app::model::v1::DeployMetadata& _internal_metadata() const;
  ::viam::app::model::v1::DeployMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::viam::app::model::v1::DeployMetadata* metadata);
  ::viam::app::model::v1::DeployMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeployRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::app::model::v1::DeployMetadata* metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.UploadResponse) */ {
 public:
  inline UploadResponse() : UploadResponse(nullptr) {}
  ~UploadResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadResponse(const UploadResponse& from);
  UploadResponse(UploadResponse&& from) noexcept
    : UploadResponse() {
    *this = ::std::move(from);
  }

  inline UploadResponse& operator=(const UploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadResponse& operator=(UploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadResponse* internal_default_instance() {
    return reinterpret_cast<const UploadResponse*>(
               &_UploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UploadResponse& a, UploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadResponse& from) {
    UploadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.UploadResponse";
  }
  protected:
  explicit UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  void clear_status();
  ::viam::app::model::v1::Status status() const;
  void set_status(::viam::app::model::v1::Status value);
  private:
  ::viam::app::model::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::model::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.UploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeleteResponse) */ {
 public:
  inline DeleteResponse() : DeleteResponse(nullptr) {}
  ~DeleteResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteResponse(const DeleteResponse& from);
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteResponse& from) {
    DeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeleteResponse";
  }
  protected:
  explicit DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  void clear_status();
  ::viam::app::model::v1::Status status() const;
  void set_status(::viam::app::model::v1::Status value);
  private:
  ::viam::app::model::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::model::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeployResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeployResponse) */ {
 public:
  inline DeployResponse() : DeployResponse(nullptr) {}
  ~DeployResponse() override;
  explicit PROTOBUF_CONSTEXPR DeployResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployResponse(const DeployResponse& from);
  DeployResponse(DeployResponse&& from) noexcept
    : DeployResponse() {
    *this = ::std::move(from);
  }

  inline DeployResponse& operator=(const DeployResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployResponse& operator=(DeployResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployResponse* internal_default_instance() {
    return reinterpret_cast<const DeployResponse*>(
               &_DeployResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeployResponse& a, DeployResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeployResponse& from) {
    DeployResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeployResponse";
  }
  protected:
  explicit DeployResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  void clear_status();
  ::viam::app::model::v1::Status status() const;
  void set_status(::viam::app::model::v1::Status value);
  private:
  ::viam::app::model::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::model::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeployResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class SyncedModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.SyncedModel) */ {
 public:
  inline SyncedModel() : SyncedModel(nullptr) {}
  ~SyncedModel() override;
  explicit PROTOBUF_CONSTEXPR SyncedModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncedModel(const SyncedModel& from);
  SyncedModel(SyncedModel&& from) noexcept
    : SyncedModel() {
    *this = ::std::move(from);
  }

  inline SyncedModel& operator=(const SyncedModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncedModel& operator=(SyncedModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncedModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncedModel* internal_default_instance() {
    return reinterpret_cast<const SyncedModel*>(
               &_SyncedModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SyncedModel& a, SyncedModel& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncedModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncedModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncedModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncedModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncedModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncedModel& from) {
    SyncedModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncedModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.SyncedModel";
  }
  protected:
  explicit SyncedModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kAssociatedDatasetFieldNumber = 3,
    kBlobPathFieldNumber = 4,
    kSyncTimeFieldNumber = 5,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string associated_dataset = 3 [json_name = "associatedDataset"];
  void clear_associated_dataset();
  const std::string& associated_dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_dataset();
  PROTOBUF_NODISCARD std::string* release_associated_dataset();
  void set_allocated_associated_dataset(std::string* associated_dataset);
  private:
  const std::string& _internal_associated_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_dataset(const std::string& value);
  std::string* _internal_mutable_associated_dataset();
  public:

  // string blob_path = 4 [json_name = "blobPath"];
  void clear_blob_path();
  const std::string& blob_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob_path();
  PROTOBUF_NODISCARD std::string* release_blob_path();
  void set_allocated_blob_path(std::string* blob_path);
  private:
  const std::string& _internal_blob_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob_path(const std::string& value);
  std::string* _internal_mutable_blob_path();
  public:

  // .google.protobuf.Timestamp sync_time = 5 [json_name = "syncTime"];
  bool has_sync_time() const;
  private:
  bool _internal_has_sync_time() const;
  public:
  void clear_sync_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& sync_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_sync_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_sync_time();
  void set_allocated_sync_time(::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_sync_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_sync_time();
  public:
  void unsafe_arena_set_allocated_sync_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_sync_time();

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.SyncedModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_dataset_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_path_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileData

// bytes data = 1 [json_name = "data"];
inline void FileData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileData::data() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.FileData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.FileData.data)
}
inline std::string* FileData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.FileData.data)
  return _s;
}
inline const std::string& FileData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FileData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_data() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.FileData.data)
  return _impl_.data_.Release();
}
inline void FileData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.FileData.data)
}

// -------------------------------------------------------------------

// UploadMetadata

// string org_id = 1 [json_name = "orgId"];
inline void UploadMetadata::clear_org_id() {
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& UploadMetadata::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMetadata::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadMetadata.org_id)
}
inline std::string* UploadMetadata::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.org_id)
  return _s;
}
inline const std::string& UploadMetadata::_internal_org_id() const {
  return _impl_.org_id_.Get();
}
inline void UploadMetadata::_internal_set_org_id(const std::string& value) {
  
  _impl_.org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadMetadata::_internal_mutable_org_id() {
  
  return _impl_.org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadMetadata::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadMetadata.org_id)
  return _impl_.org_id_.Release();
}
inline void UploadMetadata::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  _impl_.org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.org_id_.IsDefault()) {
    _impl_.org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadMetadata.org_id)
}

// string model_name = 2 [json_name = "modelName"];
inline void UploadMetadata::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& UploadMetadata::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMetadata::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadMetadata.model_name)
}
inline std::string* UploadMetadata::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.model_name)
  return _s;
}
inline const std::string& UploadMetadata::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void UploadMetadata::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadMetadata::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadMetadata::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadMetadata.model_name)
  return _impl_.model_name_.Release();
}
inline void UploadMetadata::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadMetadata.model_name)
}

// string associated_dataset = 3 [json_name = "associatedDataset"];
inline void UploadMetadata::clear_associated_dataset() {
  _impl_.associated_dataset_.ClearToEmpty();
}
inline const std::string& UploadMetadata::associated_dataset() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.associated_dataset)
  return _internal_associated_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMetadata::set_associated_dataset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.associated_dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadMetadata.associated_dataset)
}
inline std::string* UploadMetadata::mutable_associated_dataset() {
  std::string* _s = _internal_mutable_associated_dataset();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.associated_dataset)
  return _s;
}
inline const std::string& UploadMetadata::_internal_associated_dataset() const {
  return _impl_.associated_dataset_.Get();
}
inline void UploadMetadata::_internal_set_associated_dataset(const std::string& value) {
  
  _impl_.associated_dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadMetadata::_internal_mutable_associated_dataset() {
  
  return _impl_.associated_dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadMetadata::release_associated_dataset() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadMetadata.associated_dataset)
  return _impl_.associated_dataset_.Release();
}
inline void UploadMetadata::set_allocated_associated_dataset(std::string* associated_dataset) {
  if (associated_dataset != nullptr) {
    
  } else {
    
  }
  _impl_.associated_dataset_.SetAllocated(associated_dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associated_dataset_.IsDefault()) {
    _impl_.associated_dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadMetadata.associated_dataset)
}

// -------------------------------------------------------------------

// UploadRequest

// .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
inline bool UploadRequest::_internal_has_metadata() const {
  return upload_packet_case() == kMetadata;
}
inline bool UploadRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void UploadRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void UploadRequest::clear_metadata() {
  if (_internal_has_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.upload_packet_.metadata_;
    }
    clear_has_upload_packet();
  }
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadRequest.metadata)
  if (_internal_has_metadata()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::UploadMetadata* temp = _impl_.upload_packet_.metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.upload_packet_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::app::model::v1::UploadMetadata& UploadRequest::_internal_metadata() const {
  return _internal_has_metadata()
      ? *_impl_.upload_packet_.metadata_
      : reinterpret_cast< ::viam::app::model::v1::UploadMetadata&>(::viam::app::model::v1::_UploadMetadata_default_instance_);
}
inline const ::viam::app::model::v1::UploadMetadata& UploadRequest::metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadRequest.metadata)
  return _internal_metadata();
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.app.model.v1.UploadRequest.metadata)
  if (_internal_has_metadata()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::UploadMetadata* temp = _impl_.upload_packet_.metadata_;
    _impl_.upload_packet_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_metadata(::viam::app::model::v1::UploadMetadata* metadata) {
  clear_upload_packet();
  if (metadata) {
    set_has_metadata();
    _impl_.upload_packet_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.UploadRequest.metadata)
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::_internal_mutable_metadata() {
  if (!_internal_has_metadata()) {
    clear_upload_packet();
    set_has_metadata();
    _impl_.upload_packet_.metadata_ = CreateMaybeMessage< ::viam::app::model::v1::UploadMetadata >(GetArenaForAllocation());
  }
  return _impl_.upload_packet_.metadata_;
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::mutable_metadata() {
  ::viam::app::model::v1::UploadMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadRequest.metadata)
  return _msg;
}

// .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
inline bool UploadRequest::_internal_has_file_contents() const {
  return upload_packet_case() == kFileContents;
}
inline bool UploadRequest::has_file_contents() const {
  return _internal_has_file_contents();
}
inline void UploadRequest::set_has_file_contents() {
  _impl_._oneof_case_[0] = kFileContents;
}
inline void UploadRequest::clear_file_contents() {
  if (_internal_has_file_contents()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.upload_packet_.file_contents_;
    }
    clear_has_upload_packet();
  }
}
inline ::viam::app::model::v1::FileData* UploadRequest::release_file_contents() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadRequest.file_contents)
  if (_internal_has_file_contents()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::FileData* temp = _impl_.upload_packet_.file_contents_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.upload_packet_.file_contents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::app::model::v1::FileData& UploadRequest::_internal_file_contents() const {
  return _internal_has_file_contents()
      ? *_impl_.upload_packet_.file_contents_
      : reinterpret_cast< ::viam::app::model::v1::FileData&>(::viam::app::model::v1::_FileData_default_instance_);
}
inline const ::viam::app::model::v1::FileData& UploadRequest::file_contents() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadRequest.file_contents)
  return _internal_file_contents();
}
inline ::viam::app::model::v1::FileData* UploadRequest::unsafe_arena_release_file_contents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.app.model.v1.UploadRequest.file_contents)
  if (_internal_has_file_contents()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::FileData* temp = _impl_.upload_packet_.file_contents_;
    _impl_.upload_packet_.file_contents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_file_contents(::viam::app::model::v1::FileData* file_contents) {
  clear_upload_packet();
  if (file_contents) {
    set_has_file_contents();
    _impl_.upload_packet_.file_contents_ = file_contents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.UploadRequest.file_contents)
}
inline ::viam::app::model::v1::FileData* UploadRequest::_internal_mutable_file_contents() {
  if (!_internal_has_file_contents()) {
    clear_upload_packet();
    set_has_file_contents();
    _impl_.upload_packet_.file_contents_ = CreateMaybeMessage< ::viam::app::model::v1::FileData >(GetArenaForAllocation());
  }
  return _impl_.upload_packet_.file_contents_;
}
inline ::viam::app::model::v1::FileData* UploadRequest::mutable_file_contents() {
  ::viam::app::model::v1::FileData* _msg = _internal_mutable_file_contents();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadRequest.file_contents)
  return _msg;
}

inline bool UploadRequest::has_upload_packet() const {
  return upload_packet_case() != UPLOAD_PACKET_NOT_SET;
}
inline void UploadRequest::clear_has_upload_packet() {
  _impl_._oneof_case_[0] = UPLOAD_PACKET_NOT_SET;
}
inline UploadRequest::UploadPacketCase UploadRequest::upload_packet_case() const {
  return UploadRequest::UploadPacketCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteMetadata

// string org_id = 1 [json_name = "orgId"];
inline void DeleteMetadata::clear_org_id() {
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& DeleteMetadata::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteMetadata.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMetadata::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteMetadata.org_id)
}
inline std::string* DeleteMetadata::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteMetadata.org_id)
  return _s;
}
inline const std::string& DeleteMetadata::_internal_org_id() const {
  return _impl_.org_id_.Get();
}
inline void DeleteMetadata::_internal_set_org_id(const std::string& value) {
  
  _impl_.org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteMetadata::_internal_mutable_org_id() {
  
  return _impl_.org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteMetadata::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteMetadata.org_id)
  return _impl_.org_id_.Release();
}
inline void DeleteMetadata::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  _impl_.org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.org_id_.IsDefault()) {
    _impl_.org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteMetadata.org_id)
}

// string model_name = 2 [json_name = "modelName"];
inline void DeleteMetadata::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& DeleteMetadata::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteMetadata.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMetadata::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteMetadata.model_name)
}
inline std::string* DeleteMetadata::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteMetadata.model_name)
  return _s;
}
inline const std::string& DeleteMetadata::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void DeleteMetadata::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteMetadata::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteMetadata::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteMetadata.model_name)
  return _impl_.model_name_.Release();
}
inline void DeleteMetadata::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteMetadata.model_name)
}

// -------------------------------------------------------------------

// DeleteRequest

// .viam.app.model.v1.DeleteMetadata metadata = 1 [json_name = "metadata"];
inline bool DeleteRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool DeleteRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void DeleteRequest::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::viam::app::model::v1::DeleteMetadata& DeleteRequest::_internal_metadata() const {
  const ::viam::app::model::v1::DeleteMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::model::v1::DeleteMetadata&>(
      ::viam::app::model::v1::_DeleteMetadata_default_instance_);
}
inline const ::viam::app::model::v1::DeleteMetadata& DeleteRequest::metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteRequest.metadata)
  return _internal_metadata();
}
inline void DeleteRequest::unsafe_arena_set_allocated_metadata(
    ::viam::app::model::v1::DeleteMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.DeleteRequest.metadata)
}
inline ::viam::app::model::v1::DeleteMetadata* DeleteRequest::release_metadata() {
  
  ::viam::app::model::v1::DeleteMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::model::v1::DeleteMetadata* DeleteRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteRequest.metadata)
  
  ::viam::app::model::v1::DeleteMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::viam::app::model::v1::DeleteMetadata* DeleteRequest::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::model::v1::DeleteMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::viam::app::model::v1::DeleteMetadata* DeleteRequest::mutable_metadata() {
  ::viam::app::model::v1::DeleteMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteRequest.metadata)
  return _msg;
}
inline void DeleteRequest::set_allocated_metadata(::viam::app::model::v1::DeleteMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteRequest.metadata)
}

// -------------------------------------------------------------------

// DeployMetadata

// string model_name = 1 [json_name = "modelName"];
inline void DeployMetadata::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& DeployMetadata::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployMetadata.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeployMetadata::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployMetadata.model_name)
}
inline std::string* DeployMetadata::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeployMetadata.model_name)
  return _s;
}
inline const std::string& DeployMetadata::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void DeployMetadata::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeployMetadata::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeployMetadata::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeployMetadata.model_name)
  return _impl_.model_name_.Release();
}
inline void DeployMetadata::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeployMetadata.model_name)
}

// -------------------------------------------------------------------

// DeployRequest

// .viam.app.model.v1.DeployMetadata metadata = 1 [json_name = "metadata"];
inline bool DeployRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool DeployRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void DeployRequest::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
inline const ::viam::app::model::v1::DeployMetadata& DeployRequest::_internal_metadata() const {
  const ::viam::app::model::v1::DeployMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::model::v1::DeployMetadata&>(
      ::viam::app::model::v1::_DeployMetadata_default_instance_);
}
inline const ::viam::app::model::v1::DeployMetadata& DeployRequest::metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployRequest.metadata)
  return _internal_metadata();
}
inline void DeployRequest::unsafe_arena_set_allocated_metadata(
    ::viam::app::model::v1::DeployMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.DeployRequest.metadata)
}
inline ::viam::app::model::v1::DeployMetadata* DeployRequest::release_metadata() {
  
  ::viam::app::model::v1::DeployMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::model::v1::DeployMetadata* DeployRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeployRequest.metadata)
  
  ::viam::app::model::v1::DeployMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::viam::app::model::v1::DeployMetadata* DeployRequest::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::model::v1::DeployMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::viam::app::model::v1::DeployMetadata* DeployRequest::mutable_metadata() {
  ::viam::app::model::v1::DeployMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeployRequest.metadata)
  return _msg;
}
inline void DeployRequest::set_allocated_metadata(::viam::app::model::v1::DeployMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeployRequest.metadata)
}

// -------------------------------------------------------------------

// UploadResponse

// string message = 1 [json_name = "message"];
inline void UploadResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UploadResponse::message() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadResponse.message)
}
inline std::string* UploadResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadResponse.message)
  return _s;
}
inline const std::string& UploadResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UploadResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadResponse.message)
  return _impl_.message_.Release();
}
inline void UploadResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadResponse.message)
}

// .viam.app.model.v1.Status status = 2 [json_name = "status"];
inline void UploadResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::viam::app::model::v1::Status UploadResponse::_internal_status() const {
  return static_cast< ::viam::app::model::v1::Status >(_impl_.status_);
}
inline ::viam::app::model::v1::Status UploadResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadResponse.status)
  return _internal_status();
}
inline void UploadResponse::_internal_set_status(::viam::app::model::v1::Status value) {
  
  _impl_.status_ = value;
}
inline void UploadResponse::set_status(::viam::app::model::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadResponse.status)
}

// -------------------------------------------------------------------

// DeleteResponse

// string message = 1 [json_name = "message"];
inline void DeleteResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DeleteResponse::message() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteResponse.message)
}
inline std::string* DeleteResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteResponse.message)
  return _s;
}
inline const std::string& DeleteResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DeleteResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteResponse::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteResponse.message)
  return _impl_.message_.Release();
}
inline void DeleteResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteResponse.message)
}

// .viam.app.model.v1.Status status = 2 [json_name = "status"];
inline void DeleteResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::viam::app::model::v1::Status DeleteResponse::_internal_status() const {
  return static_cast< ::viam::app::model::v1::Status >(_impl_.status_);
}
inline ::viam::app::model::v1::Status DeleteResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteResponse.status)
  return _internal_status();
}
inline void DeleteResponse::_internal_set_status(::viam::app::model::v1::Status value) {
  
  _impl_.status_ = value;
}
inline void DeleteResponse::set_status(::viam::app::model::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteResponse.status)
}

// -------------------------------------------------------------------

// DeployResponse

// string message = 1 [json_name = "message"];
inline void DeployResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DeployResponse::message() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeployResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployResponse.message)
}
inline std::string* DeployResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeployResponse.message)
  return _s;
}
inline const std::string& DeployResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DeployResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeployResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeployResponse::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeployResponse.message)
  return _impl_.message_.Release();
}
inline void DeployResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeployResponse.message)
}

// .viam.app.model.v1.Status status = 2 [json_name = "status"];
inline void DeployResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::viam::app::model::v1::Status DeployResponse::_internal_status() const {
  return static_cast< ::viam::app::model::v1::Status >(_impl_.status_);
}
inline ::viam::app::model::v1::Status DeployResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployResponse.status)
  return _internal_status();
}
inline void DeployResponse::_internal_set_status(::viam::app::model::v1::Status value) {
  
  _impl_.status_ = value;
}
inline void DeployResponse::set_status(::viam::app::model::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployResponse.status)
}

// -------------------------------------------------------------------

// SyncedModel

// string org_id = 1 [json_name = "orgId"];
inline void SyncedModel::clear_org_id() {
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& SyncedModel::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.org_id)
}
inline std::string* SyncedModel::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.org_id)
  return _s;
}
inline const std::string& SyncedModel::_internal_org_id() const {
  return _impl_.org_id_.Get();
}
inline void SyncedModel::_internal_set_org_id(const std::string& value) {
  
  _impl_.org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_org_id() {
  
  return _impl_.org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.org_id)
  return _impl_.org_id_.Release();
}
inline void SyncedModel::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  _impl_.org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.org_id_.IsDefault()) {
    _impl_.org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.org_id)
}

// string model_name = 2 [json_name = "modelName"];
inline void SyncedModel::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& SyncedModel::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.model_name)
}
inline std::string* SyncedModel::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.model_name)
  return _s;
}
inline const std::string& SyncedModel::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void SyncedModel::_internal_set_model_name(const std::string& value) {
  
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_model_name() {
  
  return _impl_.model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.model_name)
  return _impl_.model_name_.Release();
}
inline void SyncedModel::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.model_name)
}

// string associated_dataset = 3 [json_name = "associatedDataset"];
inline void SyncedModel::clear_associated_dataset() {
  _impl_.associated_dataset_.ClearToEmpty();
}
inline const std::string& SyncedModel::associated_dataset() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.associated_dataset)
  return _internal_associated_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_associated_dataset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.associated_dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.associated_dataset)
}
inline std::string* SyncedModel::mutable_associated_dataset() {
  std::string* _s = _internal_mutable_associated_dataset();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.associated_dataset)
  return _s;
}
inline const std::string& SyncedModel::_internal_associated_dataset() const {
  return _impl_.associated_dataset_.Get();
}
inline void SyncedModel::_internal_set_associated_dataset(const std::string& value) {
  
  _impl_.associated_dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_associated_dataset() {
  
  return _impl_.associated_dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_associated_dataset() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.associated_dataset)
  return _impl_.associated_dataset_.Release();
}
inline void SyncedModel::set_allocated_associated_dataset(std::string* associated_dataset) {
  if (associated_dataset != nullptr) {
    
  } else {
    
  }
  _impl_.associated_dataset_.SetAllocated(associated_dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associated_dataset_.IsDefault()) {
    _impl_.associated_dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.associated_dataset)
}

// string blob_path = 4 [json_name = "blobPath"];
inline void SyncedModel::clear_blob_path() {
  _impl_.blob_path_.ClearToEmpty();
}
inline const std::string& SyncedModel::blob_path() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.blob_path)
  return _internal_blob_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_blob_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blob_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.blob_path)
}
inline std::string* SyncedModel::mutable_blob_path() {
  std::string* _s = _internal_mutable_blob_path();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.blob_path)
  return _s;
}
inline const std::string& SyncedModel::_internal_blob_path() const {
  return _impl_.blob_path_.Get();
}
inline void SyncedModel::_internal_set_blob_path(const std::string& value) {
  
  _impl_.blob_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_blob_path() {
  
  return _impl_.blob_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_blob_path() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.blob_path)
  return _impl_.blob_path_.Release();
}
inline void SyncedModel::set_allocated_blob_path(std::string* blob_path) {
  if (blob_path != nullptr) {
    
  } else {
    
  }
  _impl_.blob_path_.SetAllocated(blob_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blob_path_.IsDefault()) {
    _impl_.blob_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.blob_path)
}

// .google.protobuf.Timestamp sync_time = 5 [json_name = "syncTime"];
inline bool SyncedModel::_internal_has_sync_time() const {
  return this != internal_default_instance() && _impl_.sync_time_ != nullptr;
}
inline bool SyncedModel::has_sync_time() const {
  return _internal_has_sync_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SyncedModel::_internal_sync_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.sync_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SyncedModel::sync_time() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.sync_time)
  return _internal_sync_time();
}
inline void SyncedModel::unsafe_arena_set_allocated_sync_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sync_time_);
  }
  _impl_.sync_time_ = sync_time;
  if (sync_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.SyncedModel.sync_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::release_sync_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.sync_time_;
  _impl_.sync_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::unsafe_arena_release_sync_time() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.sync_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.sync_time_;
  _impl_.sync_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::_internal_mutable_sync_time() {
  
  if (_impl_.sync_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.sync_time_ = p;
  }
  return _impl_.sync_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::mutable_sync_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_sync_time();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.sync_time)
  return _msg;
}
inline void SyncedModel::set_allocated_sync_time(::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sync_time_);
  }
  if (sync_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_time));
    if (message_arena != submessage_arena) {
      sync_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sync_time_ = sync_time;
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.sync_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::app::model::v1::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::model::v1::Status>() {
  return ::viam::app::model::v1::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fmodel_2fv1_2fmodel_2eproto
