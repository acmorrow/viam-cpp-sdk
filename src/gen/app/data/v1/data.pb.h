// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/data/v1/data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fdata_2fv1_2fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fdata_2fv1_2fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fdata_2fv1_2fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fdata_2fv1_2fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fdata_2fv1_2fdata_2eproto;
namespace viam {
namespace app {
namespace data {
namespace v1 {
class BinaryData;
struct BinaryDataDefaultTypeInternal;
extern BinaryDataDefaultTypeInternal _BinaryData_default_instance_;
class BinaryDataByFilterRequest;
struct BinaryDataByFilterRequestDefaultTypeInternal;
extern BinaryDataByFilterRequestDefaultTypeInternal _BinaryDataByFilterRequest_default_instance_;
class BinaryDataByFilterResponse;
struct BinaryDataByFilterResponseDefaultTypeInternal;
extern BinaryDataByFilterResponseDefaultTypeInternal _BinaryDataByFilterResponse_default_instance_;
class BinaryDataByIDsRequest;
struct BinaryDataByIDsRequestDefaultTypeInternal;
extern BinaryDataByIDsRequestDefaultTypeInternal _BinaryDataByIDsRequest_default_instance_;
class BinaryDataByIDsResponse;
struct BinaryDataByIDsResponseDefaultTypeInternal;
extern BinaryDataByIDsResponseDefaultTypeInternal _BinaryDataByIDsResponse_default_instance_;
class CaptureInterval;
struct CaptureIntervalDefaultTypeInternal;
extern CaptureIntervalDefaultTypeInternal _CaptureInterval_default_instance_;
class CaptureMetadata;
struct CaptureMetadataDefaultTypeInternal;
extern CaptureMetadataDefaultTypeInternal _CaptureMetadata_default_instance_;
class CaptureMetadata_MethodParametersEntry_DoNotUse;
struct CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal;
extern CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal _CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_;
class DataRequest;
struct DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class Filter;
struct FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class TabularData;
struct TabularDataDefaultTypeInternal;
extern TabularDataDefaultTypeInternal _TabularData_default_instance_;
class TabularDataByFilterRequest;
struct TabularDataByFilterRequestDefaultTypeInternal;
extern TabularDataByFilterRequestDefaultTypeInternal _TabularDataByFilterRequest_default_instance_;
class TabularDataByFilterResponse;
struct TabularDataByFilterResponseDefaultTypeInternal;
extern TabularDataByFilterResponseDefaultTypeInternal _TabularDataByFilterResponse_default_instance_;
}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::data::v1::BinaryData* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryData>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByIDsRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByIDsRequest>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByIDsResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByIDsResponse>(Arena*);
template<> ::viam::app::data::v1::CaptureInterval* Arena::CreateMaybeMessage<::viam::app::data::v1::CaptureInterval>(Arena*);
template<> ::viam::app::data::v1::CaptureMetadata* Arena::CreateMaybeMessage<::viam::app::data::v1::CaptureMetadata>(Arena*);
template<> ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse>(Arena*);
template<> ::viam::app::data::v1::DataRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::DataRequest>(Arena*);
template<> ::viam::app::data::v1::Filter* Arena::CreateMaybeMessage<::viam::app::data::v1::Filter>(Arena*);
template<> ::viam::app::data::v1::TabularData* Arena::CreateMaybeMessage<::viam::app::data::v1::TabularData>(Arena*);
template<> ::viam::app::data::v1::TabularDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::TabularDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::TabularDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::TabularDataByFilterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace data {
namespace v1 {

// ===================================================================

class DataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DataRequest) */ {
 public:
  inline DataRequest() : DataRequest(nullptr) {}
  ~DataRequest() override;
  explicit PROTOBUF_CONSTEXPR DataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataRequest(const DataRequest& from);
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataRequest& from) {
    DataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DataRequest";
  }
  protected:
  explicit DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kSkipFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::viam::app::data::v1::Filter& filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Filter* release_filter();
  ::viam::app::data::v1::Filter* mutable_filter();
  void set_allocated_filter(::viam::app::data::v1::Filter* filter);
  private:
  const ::viam::app::data::v1::Filter& _internal_filter() const;
  ::viam::app::data::v1::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::viam::app::data::v1::Filter* filter);
  ::viam::app::data::v1::Filter* unsafe_arena_release_filter();

  // int64 skip = 2 [json_name = "skip"];
  void clear_skip();
  int64_t skip() const;
  void set_skip(int64_t value);
  private:
  int64_t _internal_skip() const;
  void _internal_set_skip(int64_t value);
  public:

  // int64 limit = 3 [json_name = "limit"];
  void clear_limit();
  int64_t limit() const;
  void set_limit(int64_t value);
  private:
  int64_t _internal_limit() const;
  void _internal_set_limit(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::app::data::v1::Filter* filter_;
    int64_t skip_;
    int64_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {}
  ~Filter() override;
  explicit PROTOBUF_CONSTEXPR Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Filter& from) {
    Filter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kOrgIdsFieldNumber = 11,
    kMimeTypeFieldNumber = 12,
    kComponentNameFieldNumber = 1,
    kComponentTypeFieldNumber = 2,
    kComponentModelFieldNumber = 3,
    kMethodFieldNumber = 4,
    kRobotNameFieldNumber = 6,
    kRobotIdFieldNumber = 7,
    kPartNameFieldNumber = 8,
    kPartIdFieldNumber = 9,
    kLocationIdFieldNumber = 10,
    kIntervalFieldNumber = 13,
  };
  // repeated string tags = 5 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string org_ids = 11 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  const std::string& org_ids(int index) const;
  std::string* mutable_org_ids(int index);
  void set_org_ids(int index, const std::string& value);
  void set_org_ids(int index, std::string&& value);
  void set_org_ids(int index, const char* value);
  void set_org_ids(int index, const char* value, size_t size);
  std::string* add_org_ids();
  void add_org_ids(const std::string& value);
  void add_org_ids(std::string&& value);
  void add_org_ids(const char* value);
  void add_org_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_org_ids();
  private:
  const std::string& _internal_org_ids(int index) const;
  std::string* _internal_add_org_ids();
  public:

  // repeated string mime_type = 12 [json_name = "mimeType"];
  int mime_type_size() const;
  private:
  int _internal_mime_type_size() const;
  public:
  void clear_mime_type();
  const std::string& mime_type(int index) const;
  std::string* mutable_mime_type(int index);
  void set_mime_type(int index, const std::string& value);
  void set_mime_type(int index, std::string&& value);
  void set_mime_type(int index, const char* value);
  void set_mime_type(int index, const char* value, size_t size);
  std::string* add_mime_type();
  void add_mime_type(const std::string& value);
  void add_mime_type(std::string&& value);
  void add_mime_type(const char* value);
  void add_mime_type(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mime_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mime_type();
  private:
  const std::string& _internal_mime_type(int index) const;
  std::string* _internal_add_mime_type();
  public:

  // string component_name = 1 [json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string component_type = 2 [json_name = "componentType"];
  void clear_component_type();
  const std::string& component_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_type();
  PROTOBUF_NODISCARD std::string* release_component_type();
  void set_allocated_component_type(std::string* component_type);
  private:
  const std::string& _internal_component_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_type(const std::string& value);
  std::string* _internal_mutable_component_type();
  public:

  // string component_model = 3 [json_name = "componentModel"];
  void clear_component_model();
  const std::string& component_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_model();
  PROTOBUF_NODISCARD std::string* release_component_model();
  void set_allocated_component_model(std::string* component_model);
  private:
  const std::string& _internal_component_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_model(const std::string& value);
  std::string* _internal_mutable_component_model();
  public:

  // string method = 4 [json_name = "method"];
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string robot_name = 6 [json_name = "robotName"];
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // string robot_id = 7 [json_name = "robotId"];
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_NODISCARD std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string part_name = 8 [json_name = "partName"];
  void clear_part_name();
  const std::string& part_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_name();
  PROTOBUF_NODISCARD std::string* release_part_name();
  void set_allocated_part_name(std::string* part_name);
  private:
  const std::string& _internal_part_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_name(const std::string& value);
  std::string* _internal_mutable_part_name();
  public:

  // string part_id = 9 [json_name = "partId"];
  void clear_part_id();
  const std::string& part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_id();
  PROTOBUF_NODISCARD std::string* release_part_id();
  void set_allocated_part_id(std::string* part_id);
  private:
  const std::string& _internal_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_id(const std::string& value);
  std::string* _internal_mutable_part_id();
  public:

  // string location_id = 10 [json_name = "locationId"];
  void clear_location_id();
  const std::string& location_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location_id();
  PROTOBUF_NODISCARD std::string* release_location_id();
  void set_allocated_location_id(std::string* location_id);
  private:
  const std::string& _internal_location_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location_id(const std::string& value);
  std::string* _internal_mutable_location_id();
  public:

  // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::viam::app::data::v1::CaptureInterval& interval() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::CaptureInterval* release_interval();
  ::viam::app::data::v1::CaptureInterval* mutable_interval();
  void set_allocated_interval(::viam::app::data::v1::CaptureInterval* interval);
  private:
  const ::viam::app::data::v1::CaptureInterval& _internal_interval() const;
  ::viam::app::data::v1::CaptureInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::viam::app::data::v1::CaptureInterval* interval);
  ::viam::app::data::v1::CaptureInterval* unsafe_arena_release_interval();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> org_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mime_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_id_;
    ::viam::app::data::v1::CaptureInterval* interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CaptureMetadata_MethodParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CaptureMetadata_MethodParametersEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CaptureMetadata_MethodParametersEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CaptureMetadata_MethodParametersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CaptureMetadata_MethodParametersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CaptureMetadata_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CaptureMetadata_MethodParametersEntry_DoNotUse& other);
  static const CaptureMetadata_MethodParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CaptureMetadata_MethodParametersEntry_DoNotUse*>(&_CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "viam.app.data.v1.CaptureMetadata.MethodParametersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};

// -------------------------------------------------------------------

class CaptureMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.CaptureMetadata) */ {
 public:
  inline CaptureMetadata() : CaptureMetadata(nullptr) {}
  ~CaptureMetadata() override;
  explicit PROTOBUF_CONSTEXPR CaptureMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureMetadata(const CaptureMetadata& from);
  CaptureMetadata(CaptureMetadata&& from) noexcept
    : CaptureMetadata() {
    *this = ::std::move(from);
  }

  inline CaptureMetadata& operator=(const CaptureMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureMetadata& operator=(CaptureMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureMetadata* internal_default_instance() {
    return reinterpret_cast<const CaptureMetadata*>(
               &_CaptureMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CaptureMetadata& a, CaptureMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CaptureMetadata& from) {
    CaptureMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.CaptureMetadata";
  }
  protected:
  explicit CaptureMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMethodParametersFieldNumber = 11,
    kTagsFieldNumber = 12,
    kOrgIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kRobotNameFieldNumber = 3,
    kRobotIdFieldNumber = 4,
    kPartNameFieldNumber = 5,
    kPartIdFieldNumber = 6,
    kComponentTypeFieldNumber = 7,
    kComponentModelFieldNumber = 8,
    kComponentNameFieldNumber = 9,
    kMethodNameFieldNumber = 10,
    kMimeTypeFieldNumber = 13,
  };
  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
  int method_parameters_size() const;
  private:
  int _internal_method_parameters_size() const;
  public:
  void clear_method_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      _internal_method_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_method_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      method_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_method_parameters();

  // repeated string tags = 12 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string location_id = 2 [json_name = "locationId"];
  void clear_location_id();
  const std::string& location_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location_id();
  PROTOBUF_NODISCARD std::string* release_location_id();
  void set_allocated_location_id(std::string* location_id);
  private:
  const std::string& _internal_location_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location_id(const std::string& value);
  std::string* _internal_mutable_location_id();
  public:

  // string robot_name = 3 [json_name = "robotName"];
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // string robot_id = 4 [json_name = "robotId"];
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_NODISCARD std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string part_name = 5 [json_name = "partName"];
  void clear_part_name();
  const std::string& part_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_name();
  PROTOBUF_NODISCARD std::string* release_part_name();
  void set_allocated_part_name(std::string* part_name);
  private:
  const std::string& _internal_part_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_name(const std::string& value);
  std::string* _internal_mutable_part_name();
  public:

  // string part_id = 6 [json_name = "partId"];
  void clear_part_id();
  const std::string& part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_id();
  PROTOBUF_NODISCARD std::string* release_part_id();
  void set_allocated_part_id(std::string* part_id);
  private:
  const std::string& _internal_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_id(const std::string& value);
  std::string* _internal_mutable_part_id();
  public:

  // string component_type = 7 [json_name = "componentType"];
  void clear_component_type();
  const std::string& component_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_type();
  PROTOBUF_NODISCARD std::string* release_component_type();
  void set_allocated_component_type(std::string* component_type);
  private:
  const std::string& _internal_component_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_type(const std::string& value);
  std::string* _internal_mutable_component_type();
  public:

  // string component_model = 8 [json_name = "componentModel"];
  void clear_component_model();
  const std::string& component_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_model();
  PROTOBUF_NODISCARD std::string* release_component_model();
  void set_allocated_component_model(std::string* component_model);
  private:
  const std::string& _internal_component_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_model(const std::string& value);
  std::string* _internal_mutable_component_model();
  public:

  // string component_name = 9 [json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string method_name = 10 [json_name = "methodName"];
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string mime_type = 13 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.CaptureMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CaptureMetadata_MethodParametersEntry_DoNotUse,
        std::string, ::PROTOBUF_NAMESPACE_ID::Any,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> method_parameters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CaptureInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.CaptureInterval) */ {
 public:
  inline CaptureInterval() : CaptureInterval(nullptr) {}
  ~CaptureInterval() override;
  explicit PROTOBUF_CONSTEXPR CaptureInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureInterval(const CaptureInterval& from);
  CaptureInterval(CaptureInterval&& from) noexcept
    : CaptureInterval() {
    *this = ::std::move(from);
  }

  inline CaptureInterval& operator=(const CaptureInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInterval& operator=(CaptureInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureInterval* internal_default_instance() {
    return reinterpret_cast<const CaptureInterval*>(
               &_CaptureInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CaptureInterval& a, CaptureInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CaptureInterval& from) {
    CaptureInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.CaptureInterval";
  }
  protected:
  explicit CaptureInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(::PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.CaptureInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TabularDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TabularDataByFilterRequest) */ {
 public:
  inline TabularDataByFilterRequest() : TabularDataByFilterRequest(nullptr) {}
  ~TabularDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR TabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabularDataByFilterRequest(const TabularDataByFilterRequest& from);
  TabularDataByFilterRequest(TabularDataByFilterRequest&& from) noexcept
    : TabularDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline TabularDataByFilterRequest& operator=(const TabularDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabularDataByFilterRequest& operator=(TabularDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabularDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabularDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const TabularDataByFilterRequest*>(
               &_TabularDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TabularDataByFilterRequest& a, TabularDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TabularDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabularDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabularDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabularDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabularDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TabularDataByFilterRequest& from) {
    TabularDataByFilterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabularDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TabularDataByFilterRequest";
  }
  protected:
  explicit TabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestFieldNumber = 1,
    kCountOnlyFieldNumber = 2,
  };
  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  bool has_data_request() const;
  private:
  bool _internal_has_data_request() const;
  public:
  void clear_data_request();
  const ::viam::app::data::v1::DataRequest& data_request() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::DataRequest* release_data_request();
  ::viam::app::data::v1::DataRequest* mutable_data_request();
  void set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request);
  private:
  const ::viam::app::data::v1::DataRequest& _internal_data_request() const;
  ::viam::app::data::v1::DataRequest* _internal_mutable_data_request();
  public:
  void unsafe_arena_set_allocated_data_request(
      ::viam::app::data::v1::DataRequest* data_request);
  ::viam::app::data::v1::DataRequest* unsafe_arena_release_data_request();

  // bool count_only = 2 [json_name = "countOnly"];
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);
  private:
  bool _internal_count_only() const;
  void _internal_set_count_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TabularDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::app::data::v1::DataRequest* data_request_;
    bool count_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TabularDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TabularDataByFilterResponse) */ {
 public:
  inline TabularDataByFilterResponse() : TabularDataByFilterResponse(nullptr) {}
  ~TabularDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR TabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabularDataByFilterResponse(const TabularDataByFilterResponse& from);
  TabularDataByFilterResponse(TabularDataByFilterResponse&& from) noexcept
    : TabularDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline TabularDataByFilterResponse& operator=(const TabularDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabularDataByFilterResponse& operator=(TabularDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabularDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabularDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const TabularDataByFilterResponse*>(
               &_TabularDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TabularDataByFilterResponse& a, TabularDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TabularDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabularDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabularDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabularDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabularDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TabularDataByFilterResponse& from) {
    TabularDataByFilterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabularDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TabularDataByFilterResponse";
  }
  protected:
  explicit TabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDataFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::viam::app::data::v1::CaptureMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
      mutable_metadata();
  private:
  const ::viam::app::data::v1::CaptureMetadata& _internal_metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* _internal_add_metadata();
  public:
  const ::viam::app::data::v1::CaptureMetadata& metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
      metadata() const;

  // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::viam::app::data::v1::TabularData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >*
      mutable_data();
  private:
  const ::viam::app::data::v1::TabularData& _internal_data(int index) const;
  ::viam::app::data::v1::TabularData* _internal_add_data();
  public:
  const ::viam::app::data::v1::TabularData& data(int index) const;
  ::viam::app::data::v1::TabularData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >&
      data() const;

  // int64 count = 3 [json_name = "count"];
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TabularDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata > metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData > data_;
    int64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TabularData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TabularData) */ {
 public:
  inline TabularData() : TabularData(nullptr) {}
  ~TabularData() override;
  explicit PROTOBUF_CONSTEXPR TabularData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabularData(const TabularData& from);
  TabularData(TabularData&& from) noexcept
    : TabularData() {
    *this = ::std::move(from);
  }

  inline TabularData& operator=(const TabularData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabularData& operator=(TabularData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabularData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabularData* internal_default_instance() {
    return reinterpret_cast<const TabularData*>(
               &_TabularData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TabularData& a, TabularData& b) {
    a.Swap(&b);
  }
  inline void Swap(TabularData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabularData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabularData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabularData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabularData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TabularData& from) {
    TabularData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabularData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TabularData";
  }
  protected:
  explicit TabularData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTimeRequestedFieldNumber = 3,
    kTimeReceivedFieldNumber = 4,
    kMetadataIndexFieldNumber = 2,
  };
  // .google.protobuf.Struct data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Struct& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_data();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Struct* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Struct* data);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_data();

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  bool has_time_requested() const;
  private:
  bool _internal_has_time_requested() const;
  public:
  void clear_time_requested();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_requested();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_requested();
  void set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_requested() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_requested();
  public:
  void unsafe_arena_set_allocated_time_requested(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_requested();

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_received();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_received();
  void set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_received() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_received();
  public:
  void unsafe_arena_set_allocated_time_received(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_received();

  // int32 metadata_index = 2 [json_name = "metadataIndex"];
  void clear_metadata_index();
  int32_t metadata_index() const;
  void set_metadata_index(int32_t value);
  private:
  int32_t _internal_metadata_index() const;
  void _internal_set_metadata_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TabularData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Struct* data_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received_;
    int32_t metadata_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryData) */ {
 public:
  inline BinaryData() : BinaryData(nullptr) {}
  ~BinaryData() override;
  explicit PROTOBUF_CONSTEXPR BinaryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryData(const BinaryData& from);
  BinaryData(BinaryData&& from) noexcept
    : BinaryData() {
    *this = ::std::move(from);
  }

  inline BinaryData& operator=(const BinaryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryData& operator=(BinaryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryData* internal_default_instance() {
    return reinterpret_cast<const BinaryData*>(
               &_BinaryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BinaryData& a, BinaryData& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryData& from) {
    BinaryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryData";
  }
  protected:
  explicit BinaryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUriFieldNumber = 2,
    kBinaryFieldNumber = 3,
    kNameFieldNumber = 7,
    kTimeRequestedFieldNumber = 5,
    kTimeReceivedFieldNumber = 6,
    kMetadataIndexFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string uri = 2 [json_name = "uri"];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // bytes binary = 3 [json_name = "binary"];
  void clear_binary();
  const std::string& binary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binary();
  PROTOBUF_NODISCARD std::string* release_binary();
  void set_allocated_binary(std::string* binary);
  private:
  const std::string& _internal_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary(const std::string& value);
  std::string* _internal_mutable_binary();
  public:

  // string name = 7 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp time_requested = 5 [json_name = "timeRequested"];
  bool has_time_requested() const;
  private:
  bool _internal_has_time_requested() const;
  public:
  void clear_time_requested();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_requested();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_requested();
  void set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_requested() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_requested();
  public:
  void unsafe_arena_set_allocated_time_requested(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_requested();

  // .google.protobuf.Timestamp time_received = 6 [json_name = "timeReceived"];
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_received();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_received();
  void set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_received() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_received();
  public:
  void unsafe_arena_set_allocated_time_received(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_received();

  // int32 metadata_index = 4 [json_name = "metadataIndex"];
  void clear_metadata_index();
  int32_t metadata_index() const;
  void set_metadata_index(int32_t value);
  private:
  int32_t _internal_metadata_index() const;
  void _internal_set_metadata_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received_;
    int32_t metadata_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByFilterRequest) */ {
 public:
  inline BinaryDataByFilterRequest() : BinaryDataByFilterRequest(nullptr) {}
  ~BinaryDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByFilterRequest(const BinaryDataByFilterRequest& from);
  BinaryDataByFilterRequest(BinaryDataByFilterRequest&& from) noexcept
    : BinaryDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline BinaryDataByFilterRequest& operator=(const BinaryDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByFilterRequest& operator=(BinaryDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByFilterRequest*>(
               &_BinaryDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BinaryDataByFilterRequest& a, BinaryDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryDataByFilterRequest& from) {
    BinaryDataByFilterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByFilterRequest";
  }
  protected:
  explicit BinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestFieldNumber = 1,
    kIncludeBinaryFieldNumber = 2,
    kCountOnlyFieldNumber = 3,
  };
  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  bool has_data_request() const;
  private:
  bool _internal_has_data_request() const;
  public:
  void clear_data_request();
  const ::viam::app::data::v1::DataRequest& data_request() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::DataRequest* release_data_request();
  ::viam::app::data::v1::DataRequest* mutable_data_request();
  void set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request);
  private:
  const ::viam::app::data::v1::DataRequest& _internal_data_request() const;
  ::viam::app::data::v1::DataRequest* _internal_mutable_data_request();
  public:
  void unsafe_arena_set_allocated_data_request(
      ::viam::app::data::v1::DataRequest* data_request);
  ::viam::app::data::v1::DataRequest* unsafe_arena_release_data_request();

  // bool include_binary = 2 [json_name = "includeBinary"];
  void clear_include_binary();
  bool include_binary() const;
  void set_include_binary(bool value);
  private:
  bool _internal_include_binary() const;
  void _internal_set_include_binary(bool value);
  public:

  // bool count_only = 3 [json_name = "countOnly"];
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);
  private:
  bool _internal_count_only() const;
  void _internal_set_count_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::app::data::v1::DataRequest* data_request_;
    bool include_binary_;
    bool count_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByFilterResponse) */ {
 public:
  inline BinaryDataByFilterResponse() : BinaryDataByFilterResponse(nullptr) {}
  ~BinaryDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByFilterResponse(const BinaryDataByFilterResponse& from);
  BinaryDataByFilterResponse(BinaryDataByFilterResponse&& from) noexcept
    : BinaryDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline BinaryDataByFilterResponse& operator=(const BinaryDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByFilterResponse& operator=(BinaryDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByFilterResponse*>(
               &_BinaryDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BinaryDataByFilterResponse& a, BinaryDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryDataByFilterResponse& from) {
    BinaryDataByFilterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByFilterResponse";
  }
  protected:
  explicit BinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDataFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::viam::app::data::v1::CaptureMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
      mutable_metadata();
  private:
  const ::viam::app::data::v1::CaptureMetadata& _internal_metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* _internal_add_metadata();
  public:
  const ::viam::app::data::v1::CaptureMetadata& metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
      metadata() const;

  // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::viam::app::data::v1::BinaryData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
      mutable_data();
  private:
  const ::viam::app::data::v1::BinaryData& _internal_data(int index) const;
  ::viam::app::data::v1::BinaryData* _internal_add_data();
  public:
  const ::viam::app::data::v1::BinaryData& data(int index) const;
  ::viam::app::data::v1::BinaryData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
      data() const;

  // int64 count = 3 [json_name = "count"];
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata > metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData > data_;
    int64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByIDsRequest) */ {
 public:
  inline BinaryDataByIDsRequest() : BinaryDataByIDsRequest(nullptr) {}
  ~BinaryDataByIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByIDsRequest(const BinaryDataByIDsRequest& from);
  BinaryDataByIDsRequest(BinaryDataByIDsRequest&& from) noexcept
    : BinaryDataByIDsRequest() {
    *this = ::std::move(from);
  }

  inline BinaryDataByIDsRequest& operator=(const BinaryDataByIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByIDsRequest& operator=(BinaryDataByIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByIDsRequest* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByIDsRequest*>(
               &_BinaryDataByIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BinaryDataByIDsRequest& a, BinaryDataByIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryDataByIDsRequest& from) {
    BinaryDataByIDsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByIDsRequest";
  }
  protected:
  explicit BinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdsFieldNumber = 1,
    kIncludeBinaryFieldNumber = 2,
  };
  // repeated string file_ids = 1 [json_name = "fileIds"];
  int file_ids_size() const;
  private:
  int _internal_file_ids_size() const;
  public:
  void clear_file_ids();
  const std::string& file_ids(int index) const;
  std::string* mutable_file_ids(int index);
  void set_file_ids(int index, const std::string& value);
  void set_file_ids(int index, std::string&& value);
  void set_file_ids(int index, const char* value);
  void set_file_ids(int index, const char* value, size_t size);
  std::string* add_file_ids();
  void add_file_ids(const std::string& value);
  void add_file_ids(std::string&& value);
  void add_file_ids(const char* value);
  void add_file_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_ids();
  private:
  const std::string& _internal_file_ids(int index) const;
  std::string* _internal_add_file_ids();
  public:

  // bool include_binary = 2 [json_name = "includeBinary"];
  void clear_include_binary();
  bool include_binary() const;
  void set_include_binary(bool value);
  private:
  bool _internal_include_binary() const;
  void _internal_set_include_binary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_ids_;
    bool include_binary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByIDsResponse) */ {
 public:
  inline BinaryDataByIDsResponse() : BinaryDataByIDsResponse(nullptr) {}
  ~BinaryDataByIDsResponse() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByIDsResponse(const BinaryDataByIDsResponse& from);
  BinaryDataByIDsResponse(BinaryDataByIDsResponse&& from) noexcept
    : BinaryDataByIDsResponse() {
    *this = ::std::move(from);
  }

  inline BinaryDataByIDsResponse& operator=(const BinaryDataByIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByIDsResponse& operator=(BinaryDataByIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByIDsResponse* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByIDsResponse*>(
               &_BinaryDataByIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BinaryDataByIDsResponse& a, BinaryDataByIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByIDsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryDataByIDsResponse& from) {
    BinaryDataByIDsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByIDsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByIDsResponse";
  }
  protected:
  explicit BinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDataFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::viam::app::data::v1::CaptureMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
      mutable_metadata();
  private:
  const ::viam::app::data::v1::CaptureMetadata& _internal_metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* _internal_add_metadata();
  public:
  const ::viam::app::data::v1::CaptureMetadata& metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
      metadata() const;

  // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::viam::app::data::v1::BinaryData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
      mutable_data();
  private:
  const ::viam::app::data::v1::BinaryData& _internal_data(int index) const;
  ::viam::app::data::v1::BinaryData* _internal_add_data();
  public:
  const ::viam::app::data::v1::BinaryData& data(int index) const;
  ::viam::app::data::v1::BinaryData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
      data() const;

  // int64 count = 3 [json_name = "count"];
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata > metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData > data_;
    int64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataRequest

// .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
inline bool DataRequest::_internal_has_filter() const {
  return this != internal_default_instance() && _impl_.filter_ != nullptr;
}
inline bool DataRequest::has_filter() const {
  return _internal_has_filter();
}
inline void DataRequest::clear_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
}
inline const ::viam::app::data::v1::Filter& DataRequest::_internal_filter() const {
  const ::viam::app::data::v1::Filter* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Filter&>(
      ::viam::app::data::v1::_Filter_default_instance_);
}
inline const ::viam::app::data::v1::Filter& DataRequest::filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.filter)
  return _internal_filter();
}
inline void DataRequest::unsafe_arena_set_allocated_filter(
    ::viam::app::data::v1::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DataRequest.filter)
}
inline ::viam::app::data::v1::Filter* DataRequest::release_filter() {
  
  ::viam::app::data::v1::Filter* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Filter* DataRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DataRequest.filter)
  
  ::viam::app::data::v1::Filter* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Filter* DataRequest::_internal_mutable_filter() {
  
  if (_impl_.filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Filter>(GetArenaForAllocation());
    _impl_.filter_ = p;
  }
  return _impl_.filter_;
}
inline ::viam::app::data::v1::Filter* DataRequest::mutable_filter() {
  ::viam::app::data::v1::Filter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DataRequest.filter)
  return _msg;
}
inline void DataRequest::set_allocated_filter(::viam::app::data::v1::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DataRequest.filter)
}

// int64 skip = 2 [json_name = "skip"];
inline void DataRequest::clear_skip() {
  _impl_.skip_ = int64_t{0};
}
inline int64_t DataRequest::_internal_skip() const {
  return _impl_.skip_;
}
inline int64_t DataRequest::skip() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.skip)
  return _internal_skip();
}
inline void DataRequest::_internal_set_skip(int64_t value) {
  
  _impl_.skip_ = value;
}
inline void DataRequest::set_skip(int64_t value) {
  _internal_set_skip(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DataRequest.skip)
}

// int64 limit = 3 [json_name = "limit"];
inline void DataRequest::clear_limit() {
  _impl_.limit_ = int64_t{0};
}
inline int64_t DataRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int64_t DataRequest::limit() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.limit)
  return _internal_limit();
}
inline void DataRequest::_internal_set_limit(int64_t value) {
  
  _impl_.limit_ = value;
}
inline void DataRequest::set_limit(int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DataRequest.limit)
}

// -------------------------------------------------------------------

// Filter

// string component_name = 1 [json_name = "componentName"];
inline void Filter::clear_component_name() {
  _impl_.component_name_.ClearToEmpty();
}
inline const std::string& Filter::component_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_component_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.component_name)
}
inline std::string* Filter::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.component_name)
  return _s;
}
inline const std::string& Filter::_internal_component_name() const {
  return _impl_.component_name_.Get();
}
inline void Filter::_internal_set_component_name(const std::string& value) {
  
  _impl_.component_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_component_name() {
  
  return _impl_.component_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_component_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.component_name)
  return _impl_.component_name_.Release();
}
inline void Filter::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  _impl_.component_name_.SetAllocated(component_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_name_.IsDefault()) {
    _impl_.component_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.component_name)
}

// string component_type = 2 [json_name = "componentType"];
inline void Filter::clear_component_type() {
  _impl_.component_type_.ClearToEmpty();
}
inline const std::string& Filter::component_type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.component_type)
  return _internal_component_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_component_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.component_type)
}
inline std::string* Filter::mutable_component_type() {
  std::string* _s = _internal_mutable_component_type();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.component_type)
  return _s;
}
inline const std::string& Filter::_internal_component_type() const {
  return _impl_.component_type_.Get();
}
inline void Filter::_internal_set_component_type(const std::string& value) {
  
  _impl_.component_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_component_type() {
  
  return _impl_.component_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_component_type() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.component_type)
  return _impl_.component_type_.Release();
}
inline void Filter::set_allocated_component_type(std::string* component_type) {
  if (component_type != nullptr) {
    
  } else {
    
  }
  _impl_.component_type_.SetAllocated(component_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_type_.IsDefault()) {
    _impl_.component_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.component_type)
}

// string component_model = 3 [json_name = "componentModel"];
inline void Filter::clear_component_model() {
  _impl_.component_model_.ClearToEmpty();
}
inline const std::string& Filter::component_model() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.component_model)
  return _internal_component_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_component_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.component_model)
}
inline std::string* Filter::mutable_component_model() {
  std::string* _s = _internal_mutable_component_model();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.component_model)
  return _s;
}
inline const std::string& Filter::_internal_component_model() const {
  return _impl_.component_model_.Get();
}
inline void Filter::_internal_set_component_model(const std::string& value) {
  
  _impl_.component_model_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_component_model() {
  
  return _impl_.component_model_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_component_model() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.component_model)
  return _impl_.component_model_.Release();
}
inline void Filter::set_allocated_component_model(std::string* component_model) {
  if (component_model != nullptr) {
    
  } else {
    
  }
  _impl_.component_model_.SetAllocated(component_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_model_.IsDefault()) {
    _impl_.component_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.component_model)
}

// string method = 4 [json_name = "method"];
inline void Filter::clear_method() {
  _impl_.method_.ClearToEmpty();
}
inline const std::string& Filter::method() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.method)
}
inline std::string* Filter::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.method)
  return _s;
}
inline const std::string& Filter::_internal_method() const {
  return _impl_.method_.Get();
}
inline void Filter::_internal_set_method(const std::string& value) {
  
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_method() {
  
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_method() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.method)
  return _impl_.method_.Release();
}
inline void Filter::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.method)
}

// repeated string tags = 5 [json_name = "tags"];
inline int Filter::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int Filter::tags_size() const {
  return _internal_tags_size();
}
inline void Filter::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* Filter::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.tags)
  return _s;
}
inline const std::string& Filter::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& Filter::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.tags)
  return _internal_tags(index);
}
inline std::string* Filter::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.tags)
  return _impl_.tags_.Mutable(index);
}
inline void Filter::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.tags)
}
inline void Filter::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.tags)
}
inline void Filter::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.tags)
}
inline void Filter::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.tags)
}
inline std::string* Filter::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void Filter::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.tags)
}
inline void Filter::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.tags)
}
inline void Filter::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.tags)
}
inline void Filter::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.tags)
  return &_impl_.tags_;
}

// string robot_name = 6 [json_name = "robotName"];
inline void Filter::clear_robot_name() {
  _impl_.robot_name_.ClearToEmpty();
}
inline const std::string& Filter::robot_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_robot_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.robot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.robot_name)
}
inline std::string* Filter::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.robot_name)
  return _s;
}
inline const std::string& Filter::_internal_robot_name() const {
  return _impl_.robot_name_.Get();
}
inline void Filter::_internal_set_robot_name(const std::string& value) {
  
  _impl_.robot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_robot_name() {
  
  return _impl_.robot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_robot_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.robot_name)
  return _impl_.robot_name_.Release();
}
inline void Filter::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    
  } else {
    
  }
  _impl_.robot_name_.SetAllocated(robot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.robot_name_.IsDefault()) {
    _impl_.robot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.robot_name)
}

// string robot_id = 7 [json_name = "robotId"];
inline void Filter::clear_robot_id() {
  _impl_.robot_id_.ClearToEmpty();
}
inline const std::string& Filter::robot_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_robot_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.robot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.robot_id)
}
inline std::string* Filter::mutable_robot_id() {
  std::string* _s = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.robot_id)
  return _s;
}
inline const std::string& Filter::_internal_robot_id() const {
  return _impl_.robot_id_.Get();
}
inline void Filter::_internal_set_robot_id(const std::string& value) {
  
  _impl_.robot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_robot_id() {
  
  return _impl_.robot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_robot_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.robot_id)
  return _impl_.robot_id_.Release();
}
inline void Filter::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  _impl_.robot_id_.SetAllocated(robot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.robot_id_.IsDefault()) {
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.robot_id)
}

// string part_name = 8 [json_name = "partName"];
inline void Filter::clear_part_name() {
  _impl_.part_name_.ClearToEmpty();
}
inline const std::string& Filter::part_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.part_name)
  return _internal_part_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_part_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.part_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.part_name)
}
inline std::string* Filter::mutable_part_name() {
  std::string* _s = _internal_mutable_part_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.part_name)
  return _s;
}
inline const std::string& Filter::_internal_part_name() const {
  return _impl_.part_name_.Get();
}
inline void Filter::_internal_set_part_name(const std::string& value) {
  
  _impl_.part_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_part_name() {
  
  return _impl_.part_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_part_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.part_name)
  return _impl_.part_name_.Release();
}
inline void Filter::set_allocated_part_name(std::string* part_name) {
  if (part_name != nullptr) {
    
  } else {
    
  }
  _impl_.part_name_.SetAllocated(part_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.part_name_.IsDefault()) {
    _impl_.part_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.part_name)
}

// string part_id = 9 [json_name = "partId"];
inline void Filter::clear_part_id() {
  _impl_.part_id_.ClearToEmpty();
}
inline const std::string& Filter::part_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.part_id)
  return _internal_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_part_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.part_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.part_id)
}
inline std::string* Filter::mutable_part_id() {
  std::string* _s = _internal_mutable_part_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.part_id)
  return _s;
}
inline const std::string& Filter::_internal_part_id() const {
  return _impl_.part_id_.Get();
}
inline void Filter::_internal_set_part_id(const std::string& value) {
  
  _impl_.part_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_part_id() {
  
  return _impl_.part_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_part_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.part_id)
  return _impl_.part_id_.Release();
}
inline void Filter::set_allocated_part_id(std::string* part_id) {
  if (part_id != nullptr) {
    
  } else {
    
  }
  _impl_.part_id_.SetAllocated(part_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.part_id_.IsDefault()) {
    _impl_.part_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.part_id)
}

// string location_id = 10 [json_name = "locationId"];
inline void Filter::clear_location_id() {
  _impl_.location_id_.ClearToEmpty();
}
inline const std::string& Filter::location_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.location_id)
  return _internal_location_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_location_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.location_id)
}
inline std::string* Filter::mutable_location_id() {
  std::string* _s = _internal_mutable_location_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.location_id)
  return _s;
}
inline const std::string& Filter::_internal_location_id() const {
  return _impl_.location_id_.Get();
}
inline void Filter::_internal_set_location_id(const std::string& value) {
  
  _impl_.location_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_location_id() {
  
  return _impl_.location_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_location_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.location_id)
  return _impl_.location_id_.Release();
}
inline void Filter::set_allocated_location_id(std::string* location_id) {
  if (location_id != nullptr) {
    
  } else {
    
  }
  _impl_.location_id_.SetAllocated(location_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_id_.IsDefault()) {
    _impl_.location_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.location_id)
}

// repeated string org_ids = 11 [json_name = "orgIds"];
inline int Filter::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int Filter::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void Filter::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline std::string* Filter::add_org_ids() {
  std::string* _s = _internal_add_org_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.org_ids)
  return _s;
}
inline const std::string& Filter::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline const std::string& Filter::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.org_ids)
  return _internal_org_ids(index);
}
inline std::string* Filter::mutable_org_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.org_ids)
  return _impl_.org_ids_.Mutable(index);
}
inline void Filter::set_org_ids(int index, const std::string& value) {
  _impl_.org_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::set_org_ids(int index, std::string&& value) {
  _impl_.org_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::set_org_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.org_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::set_org_ids(int index, const char* value, size_t size) {
  _impl_.org_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.org_ids)
}
inline std::string* Filter::_internal_add_org_ids() {
  return _impl_.org_ids_.Add();
}
inline void Filter::add_org_ids(const std::string& value) {
  _impl_.org_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::add_org_ids(std::string&& value) {
  _impl_.org_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::add_org_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.org_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::add_org_ids(const char* value, size_t size) {
  _impl_.org_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::org_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.org_ids)
  return _impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.org_ids)
  return &_impl_.org_ids_;
}

// repeated string mime_type = 12 [json_name = "mimeType"];
inline int Filter::_internal_mime_type_size() const {
  return _impl_.mime_type_.size();
}
inline int Filter::mime_type_size() const {
  return _internal_mime_type_size();
}
inline void Filter::clear_mime_type() {
  _impl_.mime_type_.Clear();
}
inline std::string* Filter::add_mime_type() {
  std::string* _s = _internal_add_mime_type();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.mime_type)
  return _s;
}
inline const std::string& Filter::_internal_mime_type(int index) const {
  return _impl_.mime_type_.Get(index);
}
inline const std::string& Filter::mime_type(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.mime_type)
  return _internal_mime_type(index);
}
inline std::string* Filter::mutable_mime_type(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.mime_type)
  return _impl_.mime_type_.Mutable(index);
}
inline void Filter::set_mime_type(int index, const std::string& value) {
  _impl_.mime_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::set_mime_type(int index, std::string&& value) {
  _impl_.mime_type_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::set_mime_type(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.mime_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::set_mime_type(int index, const char* value, size_t size) {
  _impl_.mime_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.mime_type)
}
inline std::string* Filter::_internal_add_mime_type() {
  return _impl_.mime_type_.Add();
}
inline void Filter::add_mime_type(const std::string& value) {
  _impl_.mime_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::add_mime_type(std::string&& value) {
  _impl_.mime_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::add_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.mime_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::add_mime_type(const char* value, size_t size) {
  _impl_.mime_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.mime_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::mime_type() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.mime_type)
  return _impl_.mime_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_mime_type() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.mime_type)
  return &_impl_.mime_type_;
}

// .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
inline bool Filter::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool Filter::has_interval() const {
  return _internal_has_interval();
}
inline void Filter::clear_interval() {
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
}
inline const ::viam::app::data::v1::CaptureInterval& Filter::_internal_interval() const {
  const ::viam::app::data::v1::CaptureInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::CaptureInterval&>(
      ::viam::app::data::v1::_CaptureInterval_default_instance_);
}
inline const ::viam::app::data::v1::CaptureInterval& Filter::interval() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.interval)
  return _internal_interval();
}
inline void Filter::unsafe_arena_set_allocated_interval(
    ::viam::app::data::v1::CaptureInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.Filter.interval)
}
inline ::viam::app::data::v1::CaptureInterval* Filter::release_interval() {
  
  ::viam::app::data::v1::CaptureInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::CaptureInterval* Filter::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.interval)
  
  ::viam::app::data::v1::CaptureInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::CaptureInterval* Filter::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::CaptureInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::viam::app::data::v1::CaptureInterval* Filter::mutable_interval() {
  ::viam::app::data::v1::CaptureInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.interval)
  return _msg;
}
inline void Filter::set_allocated_interval(::viam::app::data::v1::CaptureInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.interval_;
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.interval)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CaptureMetadata

// string org_id = 1 [json_name = "orgId"];
inline void CaptureMetadata::clear_org_id() {
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.org_id)
}
inline std::string* CaptureMetadata::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.org_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_org_id() const {
  return _impl_.org_id_.Get();
}
inline void CaptureMetadata::_internal_set_org_id(const std::string& value) {
  
  _impl_.org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_org_id() {
  
  return _impl_.org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.org_id)
  return _impl_.org_id_.Release();
}
inline void CaptureMetadata::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  _impl_.org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.org_id_.IsDefault()) {
    _impl_.org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.org_id)
}

// string location_id = 2 [json_name = "locationId"];
inline void CaptureMetadata::clear_location_id() {
  _impl_.location_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::location_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.location_id)
  return _internal_location_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_location_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.location_id)
}
inline std::string* CaptureMetadata::mutable_location_id() {
  std::string* _s = _internal_mutable_location_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.location_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_location_id() const {
  return _impl_.location_id_.Get();
}
inline void CaptureMetadata::_internal_set_location_id(const std::string& value) {
  
  _impl_.location_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_location_id() {
  
  return _impl_.location_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_location_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.location_id)
  return _impl_.location_id_.Release();
}
inline void CaptureMetadata::set_allocated_location_id(std::string* location_id) {
  if (location_id != nullptr) {
    
  } else {
    
  }
  _impl_.location_id_.SetAllocated(location_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_id_.IsDefault()) {
    _impl_.location_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.location_id)
}

// string robot_name = 3 [json_name = "robotName"];
inline void CaptureMetadata::clear_robot_name() {
  _impl_.robot_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::robot_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_robot_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.robot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.robot_name)
}
inline std::string* CaptureMetadata::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.robot_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_robot_name() const {
  return _impl_.robot_name_.Get();
}
inline void CaptureMetadata::_internal_set_robot_name(const std::string& value) {
  
  _impl_.robot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_robot_name() {
  
  return _impl_.robot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_robot_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.robot_name)
  return _impl_.robot_name_.Release();
}
inline void CaptureMetadata::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    
  } else {
    
  }
  _impl_.robot_name_.SetAllocated(robot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.robot_name_.IsDefault()) {
    _impl_.robot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.robot_name)
}

// string robot_id = 4 [json_name = "robotId"];
inline void CaptureMetadata::clear_robot_id() {
  _impl_.robot_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::robot_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_robot_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.robot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.robot_id)
}
inline std::string* CaptureMetadata::mutable_robot_id() {
  std::string* _s = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.robot_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_robot_id() const {
  return _impl_.robot_id_.Get();
}
inline void CaptureMetadata::_internal_set_robot_id(const std::string& value) {
  
  _impl_.robot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_robot_id() {
  
  return _impl_.robot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_robot_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.robot_id)
  return _impl_.robot_id_.Release();
}
inline void CaptureMetadata::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  _impl_.robot_id_.SetAllocated(robot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.robot_id_.IsDefault()) {
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.robot_id)
}

// string part_name = 5 [json_name = "partName"];
inline void CaptureMetadata::clear_part_name() {
  _impl_.part_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::part_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.part_name)
  return _internal_part_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_part_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.part_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.part_name)
}
inline std::string* CaptureMetadata::mutable_part_name() {
  std::string* _s = _internal_mutable_part_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.part_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_part_name() const {
  return _impl_.part_name_.Get();
}
inline void CaptureMetadata::_internal_set_part_name(const std::string& value) {
  
  _impl_.part_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_part_name() {
  
  return _impl_.part_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_part_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.part_name)
  return _impl_.part_name_.Release();
}
inline void CaptureMetadata::set_allocated_part_name(std::string* part_name) {
  if (part_name != nullptr) {
    
  } else {
    
  }
  _impl_.part_name_.SetAllocated(part_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.part_name_.IsDefault()) {
    _impl_.part_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.part_name)
}

// string part_id = 6 [json_name = "partId"];
inline void CaptureMetadata::clear_part_id() {
  _impl_.part_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::part_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.part_id)
  return _internal_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_part_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.part_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.part_id)
}
inline std::string* CaptureMetadata::mutable_part_id() {
  std::string* _s = _internal_mutable_part_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.part_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_part_id() const {
  return _impl_.part_id_.Get();
}
inline void CaptureMetadata::_internal_set_part_id(const std::string& value) {
  
  _impl_.part_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_part_id() {
  
  return _impl_.part_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_part_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.part_id)
  return _impl_.part_id_.Release();
}
inline void CaptureMetadata::set_allocated_part_id(std::string* part_id) {
  if (part_id != nullptr) {
    
  } else {
    
  }
  _impl_.part_id_.SetAllocated(part_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.part_id_.IsDefault()) {
    _impl_.part_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.part_id)
}

// string component_type = 7 [json_name = "componentType"];
inline void CaptureMetadata::clear_component_type() {
  _impl_.component_type_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::component_type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.component_type)
  return _internal_component_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_component_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.component_type)
}
inline std::string* CaptureMetadata::mutable_component_type() {
  std::string* _s = _internal_mutable_component_type();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.component_type)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_component_type() const {
  return _impl_.component_type_.Get();
}
inline void CaptureMetadata::_internal_set_component_type(const std::string& value) {
  
  _impl_.component_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_component_type() {
  
  return _impl_.component_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_component_type() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.component_type)
  return _impl_.component_type_.Release();
}
inline void CaptureMetadata::set_allocated_component_type(std::string* component_type) {
  if (component_type != nullptr) {
    
  } else {
    
  }
  _impl_.component_type_.SetAllocated(component_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_type_.IsDefault()) {
    _impl_.component_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.component_type)
}

// string component_model = 8 [json_name = "componentModel"];
inline void CaptureMetadata::clear_component_model() {
  _impl_.component_model_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::component_model() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.component_model)
  return _internal_component_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_component_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.component_model)
}
inline std::string* CaptureMetadata::mutable_component_model() {
  std::string* _s = _internal_mutable_component_model();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.component_model)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_component_model() const {
  return _impl_.component_model_.Get();
}
inline void CaptureMetadata::_internal_set_component_model(const std::string& value) {
  
  _impl_.component_model_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_component_model() {
  
  return _impl_.component_model_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_component_model() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.component_model)
  return _impl_.component_model_.Release();
}
inline void CaptureMetadata::set_allocated_component_model(std::string* component_model) {
  if (component_model != nullptr) {
    
  } else {
    
  }
  _impl_.component_model_.SetAllocated(component_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_model_.IsDefault()) {
    _impl_.component_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.component_model)
}

// string component_name = 9 [json_name = "componentName"];
inline void CaptureMetadata::clear_component_name() {
  _impl_.component_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::component_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_component_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.component_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.component_name)
}
inline std::string* CaptureMetadata::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.component_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_component_name() const {
  return _impl_.component_name_.Get();
}
inline void CaptureMetadata::_internal_set_component_name(const std::string& value) {
  
  _impl_.component_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_component_name() {
  
  return _impl_.component_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_component_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.component_name)
  return _impl_.component_name_.Release();
}
inline void CaptureMetadata::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  _impl_.component_name_.SetAllocated(component_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_name_.IsDefault()) {
    _impl_.component_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.component_name)
}

// string method_name = 10 [json_name = "methodName"];
inline void CaptureMetadata::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::method_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.method_name)
}
inline std::string* CaptureMetadata::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.method_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void CaptureMetadata::_internal_set_method_name(const std::string& value) {
  
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_method_name() {
  
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_method_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.method_name)
  return _impl_.method_name_.Release();
}
inline void CaptureMetadata::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.method_name)
}

// map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
inline int CaptureMetadata::_internal_method_parameters_size() const {
  return _impl_.method_parameters_.size();
}
inline int CaptureMetadata::method_parameters_size() const {
  return _internal_method_parameters_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
CaptureMetadata::_internal_method_parameters() const {
  return _impl_.method_parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
CaptureMetadata::method_parameters() const {
  // @@protoc_insertion_point(field_map:viam.app.data.v1.CaptureMetadata.method_parameters)
  return _internal_method_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
CaptureMetadata::_internal_mutable_method_parameters() {
  return _impl_.method_parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
CaptureMetadata::mutable_method_parameters() {
  // @@protoc_insertion_point(field_mutable_map:viam.app.data.v1.CaptureMetadata.method_parameters)
  return _internal_mutable_method_parameters();
}

// repeated string tags = 12 [json_name = "tags"];
inline int CaptureMetadata::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int CaptureMetadata::tags_size() const {
  return _internal_tags_size();
}
inline void CaptureMetadata::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* CaptureMetadata::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.CaptureMetadata.tags)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& CaptureMetadata::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.tags)
  return _internal_tags(index);
}
inline std::string* CaptureMetadata::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.tags)
  return _impl_.tags_.Mutable(index);
}
inline void CaptureMetadata::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.CaptureMetadata.tags)
}
inline std::string* CaptureMetadata::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void CaptureMetadata::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.CaptureMetadata.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CaptureMetadata::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.CaptureMetadata.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CaptureMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.CaptureMetadata.tags)
  return &_impl_.tags_;
}

// string mime_type = 13 [json_name = "mimeType"];
inline void CaptureMetadata::clear_mime_type() {
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.mime_type)
}
inline std::string* CaptureMetadata::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.mime_type)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_mime_type() const {
  return _impl_.mime_type_.Get();
}
inline void CaptureMetadata::_internal_set_mime_type(const std::string& value) {
  
  _impl_.mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_mime_type() {
  
  return _impl_.mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.mime_type)
  return _impl_.mime_type_.Release();
}
inline void CaptureMetadata::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  _impl_.mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.mime_type)
}

// -------------------------------------------------------------------

// CaptureInterval

// .google.protobuf.Timestamp start = 1 [json_name = "start"];
inline bool CaptureInterval::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool CaptureInterval::has_start() const {
  return _internal_has_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::_internal_start() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::start() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureInterval.start)
  return _internal_start();
}
inline void CaptureInterval::unsafe_arena_set_allocated_start(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.CaptureInterval.start)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::release_start() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureInterval.start)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::mutable_start() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureInterval.start)
  return _msg;
}
inline void CaptureInterval::set_allocated_start(::PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureInterval.start)
}

// .google.protobuf.Timestamp end = 2 [json_name = "end"];
inline bool CaptureInterval::_internal_has_end() const {
  return this != internal_default_instance() && _impl_.end_ != nullptr;
}
inline bool CaptureInterval::has_end() const {
  return _internal_has_end();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::_internal_end() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::end() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureInterval.end)
  return _internal_end();
}
inline void CaptureInterval::unsafe_arena_set_allocated_end(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.CaptureInterval.end)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::release_end() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureInterval.end)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::_internal_mutable_end() {
  
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::mutable_end() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureInterval.end)
  return _msg;
}
inline void CaptureInterval::set_allocated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureInterval.end)
}

// -------------------------------------------------------------------

// TabularDataByFilterRequest

// .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
inline bool TabularDataByFilterRequest::_internal_has_data_request() const {
  return this != internal_default_instance() && _impl_.data_request_ != nullptr;
}
inline bool TabularDataByFilterRequest::has_data_request() const {
  return _internal_has_data_request();
}
inline void TabularDataByFilterRequest::clear_data_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_request_ != nullptr) {
    delete _impl_.data_request_;
  }
  _impl_.data_request_ = nullptr;
}
inline const ::viam::app::data::v1::DataRequest& TabularDataByFilterRequest::_internal_data_request() const {
  const ::viam::app::data::v1::DataRequest* p = _impl_.data_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::DataRequest&>(
      ::viam::app::data::v1::_DataRequest_default_instance_);
}
inline const ::viam::app::data::v1::DataRequest& TabularDataByFilterRequest::data_request() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterRequest.data_request)
  return _internal_data_request();
}
inline void TabularDataByFilterRequest::unsafe_arena_set_allocated_data_request(
    ::viam::app::data::v1::DataRequest* data_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_request_);
  }
  _impl_.data_request_ = data_request;
  if (data_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularDataByFilterRequest.data_request)
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::release_data_request() {
  
  ::viam::app::data::v1::DataRequest* temp = _impl_.data_request_;
  _impl_.data_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::unsafe_arena_release_data_request() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularDataByFilterRequest.data_request)
  
  ::viam::app::data::v1::DataRequest* temp = _impl_.data_request_;
  _impl_.data_request_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::_internal_mutable_data_request() {
  
  if (_impl_.data_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::DataRequest>(GetArenaForAllocation());
    _impl_.data_request_ = p;
  }
  return _impl_.data_request_;
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::mutable_data_request() {
  ::viam::app::data::v1::DataRequest* _msg = _internal_mutable_data_request();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterRequest.data_request)
  return _msg;
}
inline void TabularDataByFilterRequest::set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_request_;
  }
  if (data_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_request);
    if (message_arena != submessage_arena) {
      data_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_request_ = data_request;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularDataByFilterRequest.data_request)
}

// bool count_only = 2 [json_name = "countOnly"];
inline void TabularDataByFilterRequest::clear_count_only() {
  _impl_.count_only_ = false;
}
inline bool TabularDataByFilterRequest::_internal_count_only() const {
  return _impl_.count_only_;
}
inline bool TabularDataByFilterRequest::count_only() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterRequest.count_only)
  return _internal_count_only();
}
inline void TabularDataByFilterRequest::_internal_set_count_only(bool value) {
  
  _impl_.count_only_ = value;
}
inline void TabularDataByFilterRequest::set_count_only(bool value) {
  _internal_set_count_only(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularDataByFilterRequest.count_only)
}

// -------------------------------------------------------------------

// TabularDataByFilterResponse

// repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
inline int TabularDataByFilterResponse::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int TabularDataByFilterResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void TabularDataByFilterResponse::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline ::viam::app::data::v1::CaptureMetadata* TabularDataByFilterResponse::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return _impl_.metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
TabularDataByFilterResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return &_impl_.metadata_;
}
inline const ::viam::app::data::v1::CaptureMetadata& TabularDataByFilterResponse::_internal_metadata(int index) const {
  return _impl_.metadata_.Get(index);
}
inline const ::viam::app::data::v1::CaptureMetadata& TabularDataByFilterResponse::metadata(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return _internal_metadata(index);
}
inline ::viam::app::data::v1::CaptureMetadata* TabularDataByFilterResponse::_internal_add_metadata() {
  return _impl_.metadata_.Add();
}
inline ::viam::app::data::v1::CaptureMetadata* TabularDataByFilterResponse::add_metadata() {
  ::viam::app::data::v1::CaptureMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
TabularDataByFilterResponse::metadata() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return _impl_.metadata_;
}

// repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
inline int TabularDataByFilterResponse::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int TabularDataByFilterResponse::data_size() const {
  return _internal_data_size();
}
inline void TabularDataByFilterResponse::clear_data() {
  _impl_.data_.Clear();
}
inline ::viam::app::data::v1::TabularData* TabularDataByFilterResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterResponse.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >*
TabularDataByFilterResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.TabularDataByFilterResponse.data)
  return &_impl_.data_;
}
inline const ::viam::app::data::v1::TabularData& TabularDataByFilterResponse::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::viam::app::data::v1::TabularData& TabularDataByFilterResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.data)
  return _internal_data(index);
}
inline ::viam::app::data::v1::TabularData* TabularDataByFilterResponse::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::viam::app::data::v1::TabularData* TabularDataByFilterResponse::add_data() {
  ::viam::app::data::v1::TabularData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.TabularDataByFilterResponse.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >&
TabularDataByFilterResponse::data() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.TabularDataByFilterResponse.data)
  return _impl_.data_;
}

// int64 count = 3 [json_name = "count"];
inline void TabularDataByFilterResponse::clear_count() {
  _impl_.count_ = int64_t{0};
}
inline int64_t TabularDataByFilterResponse::_internal_count() const {
  return _impl_.count_;
}
inline int64_t TabularDataByFilterResponse::count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.count)
  return _internal_count();
}
inline void TabularDataByFilterResponse::_internal_set_count(int64_t value) {
  
  _impl_.count_ = value;
}
inline void TabularDataByFilterResponse::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularDataByFilterResponse.count)
}

// -------------------------------------------------------------------

// TabularData

// .google.protobuf.Struct data = 1 [json_name = "data"];
inline bool TabularData::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool TabularData::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TabularData::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TabularData::data() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.data)
  return _internal_data();
}
inline void TabularData::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Struct* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularData.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularData.data)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularData.data)
  return _msg;
}
inline void TabularData::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Struct* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularData.data)
}

// int32 metadata_index = 2 [json_name = "metadataIndex"];
inline void TabularData::clear_metadata_index() {
  _impl_.metadata_index_ = 0;
}
inline int32_t TabularData::_internal_metadata_index() const {
  return _impl_.metadata_index_;
}
inline int32_t TabularData::metadata_index() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.metadata_index)
  return _internal_metadata_index();
}
inline void TabularData::_internal_set_metadata_index(int32_t value) {
  
  _impl_.metadata_index_ = value;
}
inline void TabularData::set_metadata_index(int32_t value) {
  _internal_set_metadata_index(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularData.metadata_index)
}

// .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
inline bool TabularData::_internal_has_time_requested() const {
  return this != internal_default_instance() && _impl_.time_requested_ != nullptr;
}
inline bool TabularData::has_time_requested() const {
  return _internal_has_time_requested();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::_internal_time_requested() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_requested_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::time_requested() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.time_requested)
  return _internal_time_requested();
}
inline void TabularData::unsafe_arena_set_allocated_time_requested(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_requested_);
  }
  _impl_.time_requested_ = time_requested;
  if (time_requested) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularData.time_requested)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::release_time_requested() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_requested_;
  _impl_.time_requested_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::unsafe_arena_release_time_requested() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularData.time_requested)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_requested_;
  _impl_.time_requested_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::_internal_mutable_time_requested() {
  
  if (_impl_.time_requested_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_requested_ = p;
  }
  return _impl_.time_requested_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::mutable_time_requested() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_requested();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularData.time_requested)
  return _msg;
}
inline void TabularData::set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_requested_);
  }
  if (time_requested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested));
    if (message_arena != submessage_arena) {
      time_requested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_requested, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_requested_ = time_requested;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularData.time_requested)
}

// .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
inline bool TabularData::_internal_has_time_received() const {
  return this != internal_default_instance() && _impl_.time_received_ != nullptr;
}
inline bool TabularData::has_time_received() const {
  return _internal_has_time_received();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::_internal_time_received() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_received_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::time_received() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.time_received)
  return _internal_time_received();
}
inline void TabularData::unsafe_arena_set_allocated_time_received(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_received_);
  }
  _impl_.time_received_ = time_received;
  if (time_received) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularData.time_received)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::release_time_received() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_received_;
  _impl_.time_received_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::unsafe_arena_release_time_received() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularData.time_received)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_received_;
  _impl_.time_received_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::_internal_mutable_time_received() {
  
  if (_impl_.time_received_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_received_ = p;
  }
  return _impl_.time_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::mutable_time_received() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_received();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularData.time_received)
  return _msg;
}
inline void TabularData::set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_received_);
  }
  if (time_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received));
    if (message_arena != submessage_arena) {
      time_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_received, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_received_ = time_received;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularData.time_received)
}

// -------------------------------------------------------------------

// BinaryData

// string id = 1 [json_name = "id"];
inline void BinaryData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BinaryData::id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryData.id)
}
inline std::string* BinaryData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.id)
  return _s;
}
inline const std::string& BinaryData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BinaryData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryData::release_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.id)
  return _impl_.id_.Release();
}
inline void BinaryData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.id)
}

// string uri = 2 [json_name = "uri"];
inline void BinaryData::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& BinaryData::uri() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryData::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryData.uri)
}
inline std::string* BinaryData::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.uri)
  return _s;
}
inline const std::string& BinaryData::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void BinaryData::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryData::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryData::release_uri() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.uri)
  return _impl_.uri_.Release();
}
inline void BinaryData::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.uri)
}

// bytes binary = 3 [json_name = "binary"];
inline void BinaryData::clear_binary() {
  _impl_.binary_.ClearToEmpty();
}
inline const std::string& BinaryData::binary() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.binary)
  return _internal_binary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryData::set_binary(ArgT0&& arg0, ArgT... args) {
 
 _impl_.binary_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryData.binary)
}
inline std::string* BinaryData::mutable_binary() {
  std::string* _s = _internal_mutable_binary();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.binary)
  return _s;
}
inline const std::string& BinaryData::_internal_binary() const {
  return _impl_.binary_.Get();
}
inline void BinaryData::_internal_set_binary(const std::string& value) {
  
  _impl_.binary_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryData::_internal_mutable_binary() {
  
  return _impl_.binary_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryData::release_binary() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.binary)
  return _impl_.binary_.Release();
}
inline void BinaryData::set_allocated_binary(std::string* binary) {
  if (binary != nullptr) {
    
  } else {
    
  }
  _impl_.binary_.SetAllocated(binary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.binary_.IsDefault()) {
    _impl_.binary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.binary)
}

// int32 metadata_index = 4 [json_name = "metadataIndex"];
inline void BinaryData::clear_metadata_index() {
  _impl_.metadata_index_ = 0;
}
inline int32_t BinaryData::_internal_metadata_index() const {
  return _impl_.metadata_index_;
}
inline int32_t BinaryData::metadata_index() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.metadata_index)
  return _internal_metadata_index();
}
inline void BinaryData::_internal_set_metadata_index(int32_t value) {
  
  _impl_.metadata_index_ = value;
}
inline void BinaryData::set_metadata_index(int32_t value) {
  _internal_set_metadata_index(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryData.metadata_index)
}

// .google.protobuf.Timestamp time_requested = 5 [json_name = "timeRequested"];
inline bool BinaryData::_internal_has_time_requested() const {
  return this != internal_default_instance() && _impl_.time_requested_ != nullptr;
}
inline bool BinaryData::has_time_requested() const {
  return _internal_has_time_requested();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryData::_internal_time_requested() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_requested_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryData::time_requested() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.time_requested)
  return _internal_time_requested();
}
inline void BinaryData::unsafe_arena_set_allocated_time_requested(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_requested_);
  }
  _impl_.time_requested_ = time_requested;
  if (time_requested) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryData.time_requested)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::release_time_requested() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_requested_;
  _impl_.time_requested_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::unsafe_arena_release_time_requested() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.time_requested)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_requested_;
  _impl_.time_requested_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::_internal_mutable_time_requested() {
  
  if (_impl_.time_requested_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_requested_ = p;
  }
  return _impl_.time_requested_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::mutable_time_requested() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_requested();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.time_requested)
  return _msg;
}
inline void BinaryData::set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_requested_);
  }
  if (time_requested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested));
    if (message_arena != submessage_arena) {
      time_requested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_requested, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_requested_ = time_requested;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.time_requested)
}

// .google.protobuf.Timestamp time_received = 6 [json_name = "timeReceived"];
inline bool BinaryData::_internal_has_time_received() const {
  return this != internal_default_instance() && _impl_.time_received_ != nullptr;
}
inline bool BinaryData::has_time_received() const {
  return _internal_has_time_received();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryData::_internal_time_received() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_received_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryData::time_received() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.time_received)
  return _internal_time_received();
}
inline void BinaryData::unsafe_arena_set_allocated_time_received(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_received_);
  }
  _impl_.time_received_ = time_received;
  if (time_received) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryData.time_received)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::release_time_received() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_received_;
  _impl_.time_received_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::unsafe_arena_release_time_received() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.time_received)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_received_;
  _impl_.time_received_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::_internal_mutable_time_received() {
  
  if (_impl_.time_received_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_received_ = p;
  }
  return _impl_.time_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryData::mutable_time_received() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_received();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.time_received)
  return _msg;
}
inline void BinaryData::set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_received_);
  }
  if (time_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received));
    if (message_arena != submessage_arena) {
      time_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_received, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_received_ = time_received;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.time_received)
}

// string name = 7 [json_name = "name"];
inline void BinaryData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BinaryData::name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryData.name)
}
inline std::string* BinaryData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.name)
  return _s;
}
inline const std::string& BinaryData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BinaryData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryData::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.name)
  return _impl_.name_.Release();
}
inline void BinaryData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.name)
}

// -------------------------------------------------------------------

// BinaryDataByFilterRequest

// .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
inline bool BinaryDataByFilterRequest::_internal_has_data_request() const {
  return this != internal_default_instance() && _impl_.data_request_ != nullptr;
}
inline bool BinaryDataByFilterRequest::has_data_request() const {
  return _internal_has_data_request();
}
inline void BinaryDataByFilterRequest::clear_data_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_request_ != nullptr) {
    delete _impl_.data_request_;
  }
  _impl_.data_request_ = nullptr;
}
inline const ::viam::app::data::v1::DataRequest& BinaryDataByFilterRequest::_internal_data_request() const {
  const ::viam::app::data::v1::DataRequest* p = _impl_.data_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::DataRequest&>(
      ::viam::app::data::v1::_DataRequest_default_instance_);
}
inline const ::viam::app::data::v1::DataRequest& BinaryDataByFilterRequest::data_request() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
  return _internal_data_request();
}
inline void BinaryDataByFilterRequest::unsafe_arena_set_allocated_data_request(
    ::viam::app::data::v1::DataRequest* data_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_request_);
  }
  _impl_.data_request_ = data_request;
  if (data_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::release_data_request() {
  
  ::viam::app::data::v1::DataRequest* temp = _impl_.data_request_;
  _impl_.data_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::unsafe_arena_release_data_request() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
  
  ::viam::app::data::v1::DataRequest* temp = _impl_.data_request_;
  _impl_.data_request_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::_internal_mutable_data_request() {
  
  if (_impl_.data_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::DataRequest>(GetArenaForAllocation());
    _impl_.data_request_ = p;
  }
  return _impl_.data_request_;
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::mutable_data_request() {
  ::viam::app::data::v1::DataRequest* _msg = _internal_mutable_data_request();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
  return _msg;
}
inline void BinaryDataByFilterRequest::set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_request_;
  }
  if (data_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_request);
    if (message_arena != submessage_arena) {
      data_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_request_ = data_request;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
}

// bool include_binary = 2 [json_name = "includeBinary"];
inline void BinaryDataByFilterRequest::clear_include_binary() {
  _impl_.include_binary_ = false;
}
inline bool BinaryDataByFilterRequest::_internal_include_binary() const {
  return _impl_.include_binary_;
}
inline bool BinaryDataByFilterRequest::include_binary() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterRequest.include_binary)
  return _internal_include_binary();
}
inline void BinaryDataByFilterRequest::_internal_set_include_binary(bool value) {
  
  _impl_.include_binary_ = value;
}
inline void BinaryDataByFilterRequest::set_include_binary(bool value) {
  _internal_set_include_binary(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterRequest.include_binary)
}

// bool count_only = 3 [json_name = "countOnly"];
inline void BinaryDataByFilterRequest::clear_count_only() {
  _impl_.count_only_ = false;
}
inline bool BinaryDataByFilterRequest::_internal_count_only() const {
  return _impl_.count_only_;
}
inline bool BinaryDataByFilterRequest::count_only() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterRequest.count_only)
  return _internal_count_only();
}
inline void BinaryDataByFilterRequest::_internal_set_count_only(bool value) {
  
  _impl_.count_only_ = value;
}
inline void BinaryDataByFilterRequest::set_count_only(bool value) {
  _internal_set_count_only(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterRequest.count_only)
}

// -------------------------------------------------------------------

// BinaryDataByFilterResponse

// repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
inline int BinaryDataByFilterResponse::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int BinaryDataByFilterResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void BinaryDataByFilterResponse::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryDataByFilterResponse::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByFilterResponse.metadata)
  return _impl_.metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
BinaryDataByFilterResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByFilterResponse.metadata)
  return &_impl_.metadata_;
}
inline const ::viam::app::data::v1::CaptureMetadata& BinaryDataByFilterResponse::_internal_metadata(int index) const {
  return _impl_.metadata_.Get(index);
}
inline const ::viam::app::data::v1::CaptureMetadata& BinaryDataByFilterResponse::metadata(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterResponse.metadata)
  return _internal_metadata(index);
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryDataByFilterResponse::_internal_add_metadata() {
  return _impl_.metadata_.Add();
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryDataByFilterResponse::add_metadata() {
  ::viam::app::data::v1::CaptureMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByFilterResponse.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
BinaryDataByFilterResponse::metadata() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByFilterResponse.metadata)
  return _impl_.metadata_;
}

// repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
inline int BinaryDataByFilterResponse::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int BinaryDataByFilterResponse::data_size() const {
  return _internal_data_size();
}
inline void BinaryDataByFilterResponse::clear_data() {
  _impl_.data_.Clear();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByFilterResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
BinaryDataByFilterResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return &_impl_.data_;
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByFilterResponse::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByFilterResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return _internal_data(index);
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByFilterResponse::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByFilterResponse::add_data() {
  ::viam::app::data::v1::BinaryData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
BinaryDataByFilterResponse::data() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return _impl_.data_;
}

// int64 count = 3 [json_name = "count"];
inline void BinaryDataByFilterResponse::clear_count() {
  _impl_.count_ = int64_t{0};
}
inline int64_t BinaryDataByFilterResponse::_internal_count() const {
  return _impl_.count_;
}
inline int64_t BinaryDataByFilterResponse::count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterResponse.count)
  return _internal_count();
}
inline void BinaryDataByFilterResponse::_internal_set_count(int64_t value) {
  
  _impl_.count_ = value;
}
inline void BinaryDataByFilterResponse::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterResponse.count)
}

// -------------------------------------------------------------------

// BinaryDataByIDsRequest

// repeated string file_ids = 1 [json_name = "fileIds"];
inline int BinaryDataByIDsRequest::_internal_file_ids_size() const {
  return _impl_.file_ids_.size();
}
inline int BinaryDataByIDsRequest::file_ids_size() const {
  return _internal_file_ids_size();
}
inline void BinaryDataByIDsRequest::clear_file_ids() {
  _impl_.file_ids_.Clear();
}
inline std::string* BinaryDataByIDsRequest::add_file_ids() {
  std::string* _s = _internal_add_file_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return _s;
}
inline const std::string& BinaryDataByIDsRequest::_internal_file_ids(int index) const {
  return _impl_.file_ids_.Get(index);
}
inline const std::string& BinaryDataByIDsRequest::file_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return _internal_file_ids(index);
}
inline std::string* BinaryDataByIDsRequest::mutable_file_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return _impl_.file_ids_.Mutable(index);
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, const std::string& value) {
  _impl_.file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, std::string&& value) {
  _impl_.file_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, const char* value, size_t size) {
  _impl_.file_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline std::string* BinaryDataByIDsRequest::_internal_add_file_ids() {
  return _impl_.file_ids_.Add();
}
inline void BinaryDataByIDsRequest::add_file_ids(const std::string& value) {
  _impl_.file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::add_file_ids(std::string&& value) {
  _impl_.file_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::add_file_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::add_file_ids(const char* value, size_t size) {
  _impl_.file_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BinaryDataByIDsRequest::file_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return _impl_.file_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BinaryDataByIDsRequest::mutable_file_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return &_impl_.file_ids_;
}

// bool include_binary = 2 [json_name = "includeBinary"];
inline void BinaryDataByIDsRequest::clear_include_binary() {
  _impl_.include_binary_ = false;
}
inline bool BinaryDataByIDsRequest::_internal_include_binary() const {
  return _impl_.include_binary_;
}
inline bool BinaryDataByIDsRequest::include_binary() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsRequest.include_binary)
  return _internal_include_binary();
}
inline void BinaryDataByIDsRequest::_internal_set_include_binary(bool value) {
  
  _impl_.include_binary_ = value;
}
inline void BinaryDataByIDsRequest::set_include_binary(bool value) {
  _internal_set_include_binary(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsRequest.include_binary)
}

// -------------------------------------------------------------------

// BinaryDataByIDsResponse

// repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
inline int BinaryDataByIDsResponse::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int BinaryDataByIDsResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void BinaryDataByIDsResponse::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryDataByIDsResponse::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByIDsResponse.metadata)
  return _impl_.metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
BinaryDataByIDsResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByIDsResponse.metadata)
  return &_impl_.metadata_;
}
inline const ::viam::app::data::v1::CaptureMetadata& BinaryDataByIDsResponse::_internal_metadata(int index) const {
  return _impl_.metadata_.Get(index);
}
inline const ::viam::app::data::v1::CaptureMetadata& BinaryDataByIDsResponse::metadata(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsResponse.metadata)
  return _internal_metadata(index);
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryDataByIDsResponse::_internal_add_metadata() {
  return _impl_.metadata_.Add();
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryDataByIDsResponse::add_metadata() {
  ::viam::app::data::v1::CaptureMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsResponse.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
BinaryDataByIDsResponse::metadata() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByIDsResponse.metadata)
  return _impl_.metadata_;
}

// repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
inline int BinaryDataByIDsResponse::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int BinaryDataByIDsResponse::data_size() const {
  return _internal_data_size();
}
inline void BinaryDataByIDsResponse::clear_data() {
  _impl_.data_.Clear();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByIDsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
BinaryDataByIDsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return &_impl_.data_;
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByIDsResponse::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByIDsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return _internal_data(index);
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByIDsResponse::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByIDsResponse::add_data() {
  ::viam::app::data::v1::BinaryData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
BinaryDataByIDsResponse::data() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return _impl_.data_;
}

// int64 count = 3 [json_name = "count"];
inline void BinaryDataByIDsResponse::clear_count() {
  _impl_.count_ = int64_t{0};
}
inline int64_t BinaryDataByIDsResponse::_internal_count() const {
  return _impl_.count_;
}
inline int64_t BinaryDataByIDsResponse::count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsResponse.count)
  return _internal_count();
}
inline void BinaryDataByIDsResponse::_internal_set_count(int64_t value) {
  
  _impl_.count_ = value;
}
inline void BinaryDataByIDsResponse::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsResponse.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fdata_2fv1_2fdata_2eproto
