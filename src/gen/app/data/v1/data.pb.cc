// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/data/v1/data.proto

#include "app/data/v1/data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace data {
namespace v1 {
PROTOBUF_CONSTEXPR DataRequest::DataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.skip_)*/int64_t{0}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataRequestDefaultTypeInternal() {}
  union {
    DataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataRequestDefaultTypeInternal _DataRequest_default_instance_;
PROTOBUF_CONSTEXPR Filter::Filter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.org_ids_)*/{}
  , /*decltype(_impl_.mime_type_)*/{}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterDefaultTypeInternal _Filter_default_instance_;
PROTOBUF_CONSTEXPR CaptureMetadata_MethodParametersEntry_DoNotUse::CaptureMetadata_MethodParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CaptureMetadata_MethodParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal _CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CaptureMetadata::CaptureMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.org_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_ext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaptureMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureMetadataDefaultTypeInternal() {}
  union {
    CaptureMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureMetadataDefaultTypeInternal _CaptureMetadata_default_instance_;
PROTOBUF_CONSTEXPR CaptureInterval::CaptureInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaptureIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureIntervalDefaultTypeInternal() {}
  union {
    CaptureInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureIntervalDefaultTypeInternal _CaptureInterval_default_instance_;
PROTOBUF_CONSTEXPR TabularDataByFilterRequest::TabularDataByFilterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_request_)*/nullptr
  , /*decltype(_impl_.count_only_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TabularDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularDataByFilterRequestDefaultTypeInternal() {}
  union {
    TabularDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularDataByFilterRequestDefaultTypeInternal _TabularDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR TabularDataByFilterResponse::TabularDataByFilterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TabularDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularDataByFilterResponseDefaultTypeInternal() {}
  union {
    TabularDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularDataByFilterResponseDefaultTypeInternal _TabularDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR TabularData::TabularData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.time_requested_)*/nullptr
  , /*decltype(_impl_.time_received_)*/nullptr
  , /*decltype(_impl_.metadata_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TabularDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularDataDefaultTypeInternal() {}
  union {
    TabularData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularDataDefaultTypeInternal _TabularData_default_instance_;
PROTOBUF_CONSTEXPR BinaryData::BinaryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.binary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_requested_)*/nullptr
  , /*decltype(_impl_.time_received_)*/nullptr
  , /*decltype(_impl_.metadata_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataDefaultTypeInternal() {}
  union {
    BinaryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataDefaultTypeInternal _BinaryData_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByFilterRequest::BinaryDataByFilterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_request_)*/nullptr
  , /*decltype(_impl_.include_binary_)*/false
  , /*decltype(_impl_.count_only_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByFilterRequestDefaultTypeInternal() {}
  union {
    BinaryDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByFilterRequestDefaultTypeInternal _BinaryDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByFilterResponse::BinaryDataByFilterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByFilterResponseDefaultTypeInternal() {}
  union {
    BinaryDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByFilterResponseDefaultTypeInternal _BinaryDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByIDsRequest::BinaryDataByIDsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_ids_)*/{}
  , /*decltype(_impl_.include_binary_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryDataByIDsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByIDsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByIDsRequestDefaultTypeInternal() {}
  union {
    BinaryDataByIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByIDsRequestDefaultTypeInternal _BinaryDataByIDsRequest_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByIDsResponse::BinaryDataByIDsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryDataByIDsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByIDsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByIDsResponseDefaultTypeInternal() {}
  union {
    BinaryDataByIDsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByIDsResponseDefaultTypeInternal _BinaryDataByIDsResponse_default_instance_;
}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_app_2fdata_2fv1_2fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fdata_2fv1_2fdata_2eproto = nullptr;

const uint32_t TableStruct_app_2fdata_2fv1_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, _impl_.skip_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.robot_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.part_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.location_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.org_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.location_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.robot_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.part_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.method_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _impl_.file_ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureInterval, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureInterval, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterRequest, _impl_.data_request_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterRequest, _impl_.count_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, _impl_.metadata_index_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, _impl_.time_requested_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, _impl_.time_received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.binary_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.metadata_index_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.time_requested_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.time_received_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, _impl_.data_request_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, _impl_.include_binary_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, _impl_.count_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsRequest, _impl_.file_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsRequest, _impl_.include_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, _impl_.count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::app::data::v1::DataRequest)},
  { 9, -1, -1, sizeof(::viam::app::data::v1::Filter)},
  { 28, 36, -1, sizeof(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse)},
  { 38, -1, -1, sizeof(::viam::app::data::v1::CaptureMetadata)},
  { 59, -1, -1, sizeof(::viam::app::data::v1::CaptureInterval)},
  { 67, -1, -1, sizeof(::viam::app::data::v1::TabularDataByFilterRequest)},
  { 75, -1, -1, sizeof(::viam::app::data::v1::TabularDataByFilterResponse)},
  { 84, -1, -1, sizeof(::viam::app::data::v1::TabularData)},
  { 94, -1, -1, sizeof(::viam::app::data::v1::BinaryData)},
  { 107, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByFilterRequest)},
  { 116, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByFilterResponse)},
  { 125, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByIDsRequest)},
  { 133, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByIDsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::data::v1::_DataRequest_default_instance_._instance,
  &::viam::app::data::v1::_Filter_default_instance_._instance,
  &::viam::app::data::v1::_CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_._instance,
  &::viam::app::data::v1::_CaptureMetadata_default_instance_._instance,
  &::viam::app::data::v1::_CaptureInterval_default_instance_._instance,
  &::viam::app::data::v1::_TabularDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_TabularDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_TabularData_default_instance_._instance,
  &::viam::app::data::v1::_BinaryData_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByIDsRequest_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByIDsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fdata_2fv1_2fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026app/data/v1/data.proto\022\020viam.app.data."
  "v1\032\031google/protobuf/any.proto\032\034google/pr"
  "otobuf/struct.proto\032\037google/protobuf/tim"
  "estamp.proto\"i\n\013DataRequest\0220\n\006filter\030\001 "
  "\001(\0132\030.viam.app.data.v1.FilterR\006filter\022\022\n"
  "\004skip\030\002 \001(\003R\004skip\022\024\n\005limit\030\003 \001(\003R\005limit\""
  "\261\003\n\006Filter\022%\n\016component_name\030\001 \001(\tR\rcomp"
  "onentName\022%\n\016component_type\030\002 \001(\tR\rcompo"
  "nentType\022\'\n\017component_model\030\003 \001(\tR\016compo"
  "nentModel\022\026\n\006method\030\004 \001(\tR\006method\022\022\n\004tag"
  "s\030\005 \003(\tR\004tags\022\035\n\nrobot_name\030\006 \001(\tR\trobot"
  "Name\022\031\n\010robot_id\030\007 \001(\tR\007robotId\022\033\n\tpart_"
  "name\030\010 \001(\tR\010partName\022\027\n\007part_id\030\t \001(\tR\006p"
  "artId\022\037\n\013location_id\030\n \001(\tR\nlocationId\022\027"
  "\n\007org_ids\030\013 \003(\tR\006orgIds\022\033\n\tmime_type\030\014 \003"
  "(\tR\010mimeType\022=\n\010interval\030\r \001(\0132!.viam.ap"
  "p.data.v1.CaptureIntervalR\010interval\"\373\004\n\017"
  "CaptureMetadata\022\025\n\006org_id\030\001 \001(\tR\005orgId\022\037"
  "\n\013location_id\030\002 \001(\tR\nlocationId\022\035\n\nrobot"
  "_name\030\003 \001(\tR\trobotName\022\031\n\010robot_id\030\004 \001(\t"
  "R\007robotId\022\033\n\tpart_name\030\005 \001(\tR\010partName\022\027"
  "\n\007part_id\030\006 \001(\tR\006partId\022%\n\016component_typ"
  "e\030\007 \001(\tR\rcomponentType\022\'\n\017component_mode"
  "l\030\010 \001(\tR\016componentModel\022%\n\016component_nam"
  "e\030\t \001(\tR\rcomponentName\022\037\n\013method_name\030\n "
  "\001(\tR\nmethodName\022d\n\021method_parameters\030\013 \003"
  "(\01327.viam.app.data.v1.CaptureMetadata.Me"
  "thodParametersEntryR\020methodParameters\022\022\n"
  "\004tags\030\014 \003(\tR\004tags\022\033\n\tmime_type\030\r \001(\tR\010mi"
  "meType\022\033\n\tfile_name\030\016 \001(\tR\010fileName\022\031\n\010f"
  "ile_ext\030\017 \001(\tR\007fileExt\032Y\n\025MethodParamete"
  "rsEntry\022\020\n\003key\030\001 \001(\tR\003key\022*\n\005value\030\002 \001(\013"
  "2\024.google.protobuf.AnyR\005value:\0028\001\"q\n\017Cap"
  "tureInterval\0220\n\005start\030\001 \001(\0132\032.google.pro"
  "tobuf.TimestampR\005start\022,\n\003end\030\002 \001(\0132\032.go"
  "ogle.protobuf.TimestampR\003end\"}\n\032TabularD"
  "ataByFilterRequest\022@\n\014data_request\030\001 \001(\013"
  "2\035.viam.app.data.v1.DataRequestR\013dataReq"
  "uest\022\035\n\ncount_only\030\002 \001(\010R\tcountOnly\"\245\001\n\033"
  "TabularDataByFilterResponse\022=\n\010metadata\030"
  "\001 \003(\0132!.viam.app.data.v1.CaptureMetadata"
  "R\010metadata\0221\n\004data\030\002 \003(\0132\035.viam.app.data"
  ".v1.TabularDataR\004data\022\024\n\005count\030\003 \001(\003R\005co"
  "unt\"\345\001\n\013TabularData\022+\n\004data\030\001 \001(\0132\027.goog"
  "le.protobuf.StructR\004data\022%\n\016metadata_ind"
  "ex\030\002 \001(\005R\rmetadataIndex\022A\n\016time_requeste"
  "d\030\003 \001(\0132\032.google.protobuf.TimestampR\rtim"
  "eRequested\022\?\n\rtime_received\030\004 \001(\0132\032.goog"
  "le.protobuf.TimestampR\014timeReceived\"\205\002\n\n"
  "BinaryData\022\016\n\002id\030\001 \001(\tR\002id\022\020\n\003uri\030\002 \001(\tR"
  "\003uri\022\026\n\006binary\030\003 \001(\014R\006binary\022%\n\016metadata"
  "_index\030\004 \001(\005R\rmetadataIndex\022A\n\016time_requ"
  "ested\030\005 \001(\0132\032.google.protobuf.TimestampR"
  "\rtimeRequested\022\?\n\rtime_received\030\006 \001(\0132\032."
  "google.protobuf.TimestampR\014timeReceived\022"
  "\022\n\004name\030\007 \001(\tR\004name\"\243\001\n\031BinaryDataByFilt"
  "erRequest\022@\n\014data_request\030\001 \001(\0132\035.viam.a"
  "pp.data.v1.DataRequestR\013dataRequest\022%\n\016i"
  "nclude_binary\030\002 \001(\010R\rincludeBinary\022\035\n\nco"
  "unt_only\030\003 \001(\010R\tcountOnly\"\243\001\n\032BinaryData"
  "ByFilterResponse\022=\n\010metadata\030\001 \003(\0132!.via"
  "m.app.data.v1.CaptureMetadataR\010metadata\022"
  "0\n\004data\030\002 \003(\0132\034.viam.app.data.v1.BinaryD"
  "ataR\004data\022\024\n\005count\030\003 \001(\003R\005count\"Z\n\026Binar"
  "yDataByIDsRequest\022\031\n\010file_ids\030\001 \003(\tR\007fil"
  "eIds\022%\n\016include_binary\030\002 \001(\010R\rincludeBin"
  "ary\"\240\001\n\027BinaryDataByIDsResponse\022=\n\010metad"
  "ata\030\001 \003(\0132!.viam.app.data.v1.CaptureMeta"
  "dataR\010metadata\0220\n\004data\030\002 \003(\0132\034.viam.app."
  "data.v1.BinaryDataR\004data\022\024\n\005count\030\003 \001(\003R"
  "\005count2\332\002\n\013DataService\022r\n\023TabularDataByF"
  "ilter\022,.viam.app.data.v1.TabularDataByFi"
  "lterRequest\032-.viam.app.data.v1.TabularDa"
  "taByFilterResponse\022o\n\022BinaryDataByFilter"
  "\022+.viam.app.data.v1.BinaryDataByFilterRe"
  "quest\032,.viam.app.data.v1.BinaryDataByFil"
  "terResponse\022f\n\017BinaryDataByIDs\022(.viam.ap"
  "p.data.v1.BinaryDataByIDsRequest\032).viam."
  "app.data.v1.BinaryDataByIDsResponseB\035Z\033g"
  "o.viam.com/api/app/data/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fdata_2fv1_2fdata_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fdata_2fv1_2fdata_2eproto = {
    false, false, 3194, descriptor_table_protodef_app_2fdata_2fv1_2fdata_2eproto,
    "app/data/v1/data.proto",
    &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once, descriptor_table_app_2fdata_2fv1_2fdata_2eproto_deps, 3, 13,
    schemas, file_default_instances, TableStruct_app_2fdata_2fv1_2fdata_2eproto::offsets,
    file_level_metadata_app_2fdata_2fv1_2fdata_2eproto, file_level_enum_descriptors_app_2fdata_2fv1_2fdata_2eproto,
    file_level_service_descriptors_app_2fdata_2fv1_2fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter() {
  return &descriptor_table_app_2fdata_2fv1_2fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fdata_2fv1_2fdata_2eproto(&descriptor_table_app_2fdata_2fv1_2fdata_2eproto);
namespace viam {
namespace app {
namespace data {
namespace v1 {

// ===================================================================

class DataRequest::_Internal {
 public:
  static const ::viam::app::data::v1::Filter& filter(const DataRequest* msg);
};

const ::viam::app::data::v1::Filter&
DataRequest::_Internal::filter(const DataRequest* msg) {
  return *msg->_impl_.filter_;
}
DataRequest::DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DataRequest)
}
DataRequest::DataRequest(const DataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.skip_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::viam::app::data::v1::Filter(*from._impl_.filter_);
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DataRequest)
}

inline void DataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.skip_){int64_t{0}}
    , decltype(_impl_.limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataRequest::~DataRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void DataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  ::memset(&_impl_.skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 skip = 2 [json_name = "skip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // int64 skip = 2 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_skip(), target);
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DataRequest)
  return target;
}

size_t DataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // int64 skip = 2 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_skip());
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataRequest::GetClassData() const { return &_class_data_; }


void DataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataRequest*>(&to_msg);
  auto& from = static_cast<const DataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::viam::app::data::v1::Filter::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataRequest::CopyFrom(const DataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {
  return true;
}

void DataRequest::InternalSwap(DataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataRequest, _impl_.limit_)
      + sizeof(DataRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(DataRequest, _impl_.filter_)>(
          reinterpret_cast<char*>(&_impl_.filter_),
          reinterpret_cast<char*>(&other->_impl_.filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[0]);
}

// ===================================================================

class Filter::_Internal {
 public:
  static const ::viam::app::data::v1::CaptureInterval& interval(const Filter* msg);
};

const ::viam::app::data::v1::CaptureInterval&
Filter::_Internal::interval(const Filter* msg) {
  return *msg->_impl_.interval_;
}
Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Filter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.org_ids_){from._impl_.org_ids_}
    , decltype(_impl_.mime_type_){from._impl_.mime_type_}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.robot_name_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_name_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.interval_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    _this->_impl_.component_type_.Set(from._internal_component_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    _this->_impl_.component_model_.Set(from._internal_component_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_name().empty()) {
    _this->_impl_.robot_name_.Set(from._internal_robot_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_id().empty()) {
    _this->_impl_.robot_id_.Set(from._internal_robot_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_name().empty()) {
    _this->_impl_.part_name_.Set(from._internal_part_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    _this->_impl_.part_id_.Set(from._internal_part_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_id().empty()) {
    _this->_impl_.location_id_.Set(from._internal_location_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::viam::app::data::v1::CaptureInterval(*from._impl_.interval_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.Filter)
}

inline void Filter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.org_ids_){arena}
    , decltype(_impl_.mime_type_){arena}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.robot_name_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_name_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.interval_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.Filter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.org_ids_.~RepeatedPtrField();
  _impl_.mime_type_.~RepeatedPtrField();
  _impl_.component_name_.Destroy();
  _impl_.component_type_.Destroy();
  _impl_.component_model_.Destroy();
  _impl_.method_.Destroy();
  _impl_.robot_name_.Destroy();
  _impl_.robot_id_.Destroy();
  _impl_.part_name_.Destroy();
  _impl_.part_id_.Destroy();
  _impl_.location_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void Filter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.org_ids_.Clear();
  _impl_.mime_type_.Clear();
  _impl_.component_name_.ClearToEmpty();
  _impl_.component_type_.ClearToEmpty();
  _impl_.component_model_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  _impl_.robot_name_.ClearToEmpty();
  _impl_.robot_id_.ClearToEmpty();
  _impl_.part_name_.ClearToEmpty();
  _impl_.part_id_.ClearToEmpty();
  _impl_.location_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component_name = 1 [json_name = "componentName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 2 [json_name = "componentType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 3 [json_name = "componentModel"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string method = 4 [json_name = "method"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.method"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 5 [json_name = "tags"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string robot_name = 6 [json_name = "robotName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_robot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.robot_name"));
        } else
          goto handle_unusual;
        continue;
      // string robot_id = 7 [json_name = "robotId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.robot_id"));
        } else
          goto handle_unusual;
        continue;
      // string part_name = 8 [json_name = "partName"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_part_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.part_name"));
        } else
          goto handle_unusual;
        continue;
      // string part_id = 9 [json_name = "partId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.part_id"));
        } else
          goto handle_unusual;
        continue;
      // string location_id = 10 [json_name = "locationId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_location_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.location_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string org_ids = 11 [json_name = "orgIds"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_org_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.org_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string mime_type = 12 [json_name = "mimeType"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mime_type();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.mime_type"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string component_name = 1 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.component_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_name(), target);
  }

  // string component_type = 2 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.component_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_type(), target);
  }

  // string component_model = 3 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.component_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_model(), target);
  }

  // string method = 4 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // repeated string tags = 5 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.tags");
    target = stream->WriteString(5, s, target);
  }

  // string robot_name = 6 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_name().data(), static_cast<int>(this->_internal_robot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.robot_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_robot_name(), target);
  }

  // string robot_id = 7 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.robot_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_robot_id(), target);
  }

  // string part_name = 8 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_name().data(), static_cast<int>(this->_internal_part_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.part_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_part_name(), target);
  }

  // string part_id = 9 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.part_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_part_id(), target);
  }

  // string location_id = 10 [json_name = "locationId"];
  if (!this->_internal_location_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_id().data(), static_cast<int>(this->_internal_location_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.location_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_location_id(), target);
  }

  // repeated string org_ids = 11 [json_name = "orgIds"];
  for (int i = 0, n = this->_internal_org_ids_size(); i < n; i++) {
    const auto& s = this->_internal_org_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.org_ids");
    target = stream->WriteString(11, s, target);
  }

  // repeated string mime_type = 12 [json_name = "mimeType"];
  for (int i = 0, n = this->_internal_mime_type_size(); i < n; i++) {
    const auto& s = this->_internal_mime_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.mime_type");
    target = stream->WriteString(12, s, target);
  }

  // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // repeated string org_ids = 11 [json_name = "orgIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.org_ids_.size());
  for (int i = 0, n = _impl_.org_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.org_ids_.Get(i));
  }

  // repeated string mime_type = 12 [json_name = "mimeType"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.mime_type_.size());
  for (int i = 0, n = _impl_.mime_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.mime_type_.Get(i));
  }

  // string component_name = 1 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string component_type = 2 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_model = 3 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string method = 4 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string robot_name = 6 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_name());
  }

  // string robot_id = 7 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string part_name = 8 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_name());
  }

  // string part_id = 9 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // string location_id = 10 [json_name = "locationId"];
  if (!this->_internal_location_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_id());
  }

  // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filter::GetClassData() const { return &_class_data_; }


void Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Filter*>(&to_msg);
  auto& from = static_cast<const Filter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.Filter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.org_ids_.MergeFrom(from._impl_.org_ids_);
  _this->_impl_.mime_type_.MergeFrom(from._impl_.mime_type_);
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_component_type().empty()) {
    _this->_internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_model().empty()) {
    _this->_internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_robot_name().empty()) {
    _this->_internal_set_robot_name(from._internal_robot_name());
  }
  if (!from._internal_robot_id().empty()) {
    _this->_internal_set_robot_id(from._internal_robot_id());
  }
  if (!from._internal_part_name().empty()) {
    _this->_internal_set_part_name(from._internal_part_name());
  }
  if (!from._internal_part_id().empty()) {
    _this->_internal_set_part_id(from._internal_part_id());
  }
  if (!from._internal_location_id().empty()) {
    _this->_internal_set_location_id(from._internal_location_id());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::viam::app::data::v1::CaptureInterval::MergeFrom(
        from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.org_ids_.InternalSwap(&other->_impl_.org_ids_);
  _impl_.mime_type_.InternalSwap(&other->_impl_.mime_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_type_, lhs_arena,
      &other->_impl_.component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_model_, lhs_arena,
      &other->_impl_.component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_name_, lhs_arena,
      &other->_impl_.robot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_id_, lhs_arena,
      &other->_impl_.robot_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_name_, lhs_arena,
      &other->_impl_.part_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_id_, lhs_arena,
      &other->_impl_.part_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_id_, lhs_arena,
      &other->_impl_.location_id_, rhs_arena
  );
  swap(_impl_.interval_, other->_impl_.interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[1]);
}

// ===================================================================

CaptureMetadata_MethodParametersEntry_DoNotUse::CaptureMetadata_MethodParametersEntry_DoNotUse() {}
CaptureMetadata_MethodParametersEntry_DoNotUse::CaptureMetadata_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CaptureMetadata_MethodParametersEntry_DoNotUse::MergeFrom(const CaptureMetadata_MethodParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CaptureMetadata_MethodParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[2]);
}

// ===================================================================

class CaptureMetadata::_Internal {
 public:
};

void CaptureMetadata::clear_method_parameters() {
  _impl_.method_parameters_.Clear();
}
CaptureMetadata::CaptureMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CaptureMetadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.CaptureMetadata)
}
CaptureMetadata::CaptureMetadata(const CaptureMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CaptureMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.org_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.robot_name_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_name_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_ext_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _impl_.org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    _this->_impl_.org_id_.Set(from._internal_org_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_id().empty()) {
    _this->_impl_.location_id_.Set(from._internal_location_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_name().empty()) {
    _this->_impl_.robot_name_.Set(from._internal_robot_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_id().empty()) {
    _this->_impl_.robot_id_.Set(from._internal_robot_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_name().empty()) {
    _this->_impl_.part_name_.Set(from._internal_part_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    _this->_impl_.part_id_.Set(from._internal_part_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    _this->_impl_.component_type_.Set(from._internal_component_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    _this->_impl_.component_model_.Set(from._internal_component_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_ext().empty()) {
    _this->_impl_.file_ext_.Set(from._internal_file_ext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.CaptureMetadata)
}

inline void CaptureMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.org_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.robot_name_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_name_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_ext_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CaptureMetadata::~CaptureMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.CaptureMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CaptureMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_parameters_.Destruct();
  _impl_.method_parameters_.~MapField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.org_id_.Destroy();
  _impl_.location_id_.Destroy();
  _impl_.robot_name_.Destroy();
  _impl_.robot_id_.Destroy();
  _impl_.part_name_.Destroy();
  _impl_.part_id_.Destroy();
  _impl_.component_type_.Destroy();
  _impl_.component_model_.Destroy();
  _impl_.component_name_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.file_ext_.Destroy();
}

void CaptureMetadata::ArenaDtor(void* object) {
  CaptureMetadata* _this = reinterpret_cast< CaptureMetadata* >(object);
  _this->_impl_.method_parameters_.Destruct();
}
void CaptureMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptureMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.CaptureMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_parameters_.Clear();
  _impl_.tags_.Clear();
  _impl_.org_id_.ClearToEmpty();
  _impl_.location_id_.ClearToEmpty();
  _impl_.robot_name_.ClearToEmpty();
  _impl_.robot_id_.ClearToEmpty();
  _impl_.part_name_.ClearToEmpty();
  _impl_.part_id_.ClearToEmpty();
  _impl_.component_type_.ClearToEmpty();
  _impl_.component_model_.ClearToEmpty();
  _impl_.component_name_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.file_ext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string location_id = 2 [json_name = "locationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.location_id"));
        } else
          goto handle_unusual;
        continue;
      // string robot_name = 3 [json_name = "robotName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_robot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.robot_name"));
        } else
          goto handle_unusual;
        continue;
      // string robot_id = 4 [json_name = "robotId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.robot_id"));
        } else
          goto handle_unusual;
        continue;
      // string part_name = 5 [json_name = "partName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_part_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.part_name"));
        } else
          goto handle_unusual;
        continue;
      // string part_id = 6 [json_name = "partId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.part_id"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 7 [json_name = "componentType"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 8 [json_name = "componentModel"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 9 [json_name = "componentName"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 10 [json_name = "methodName"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.method_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.method_parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 12 [json_name = "tags"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 13 [json_name = "mimeType"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string file_name = 14 [json_name = "fileName"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_ext = 15 [json_name = "fileExt"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_file_ext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.file_ext"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.CaptureMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string location_id = 2 [json_name = "locationId"];
  if (!this->_internal_location_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_id().data(), static_cast<int>(this->_internal_location_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.location_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location_id(), target);
  }

  // string robot_name = 3 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_name().data(), static_cast<int>(this->_internal_robot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.robot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robot_name(), target);
  }

  // string robot_id = 4 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.robot_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_robot_id(), target);
  }

  // string part_name = 5 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_name().data(), static_cast<int>(this->_internal_part_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.part_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_part_name(), target);
  }

  // string part_id = 6 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.part_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_part_id(), target);
  }

  // string component_type = 7 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.component_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_component_type(), target);
  }

  // string component_model = 8 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.component_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_component_model(), target);
  }

  // string component_name = 9 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.component_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_component_name(), target);
  }

  // string method_name = 10 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.method_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_method_name(), target);
  }

  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
  if (!this->_internal_method_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = CaptureMetadata_MethodParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_method_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.app.data.v1.CaptureMetadata.MethodParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string tags = 12 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.tags");
    target = stream->WriteString(12, s, target);
  }

  // string mime_type = 13 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.mime_type");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_mime_type(), target);
  }

  // string file_name = 14 [json_name = "fileName"];
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.file_name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_file_name(), target);
  }

  // string file_ext = 15 [json_name = "fileExt"];
  if (!this->_internal_file_ext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_ext().data(), static_cast<int>(this->_internal_file_ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.file_ext");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_file_ext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.CaptureMetadata)
  return target;
}

size_t CaptureMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.CaptureMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_method_parameters().begin();
      it != this->_internal_method_parameters().end(); ++it) {
    total_size += CaptureMetadata_MethodParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 12 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string location_id = 2 [json_name = "locationId"];
  if (!this->_internal_location_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_id());
  }

  // string robot_name = 3 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_name());
  }

  // string robot_id = 4 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string part_name = 5 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_name());
  }

  // string part_id = 6 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // string component_type = 7 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_model = 8 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string component_name = 9 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string method_name = 10 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string mime_type = 13 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string file_name = 14 [json_name = "fileName"];
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_ext = 15 [json_name = "fileExt"];
  if (!this->_internal_file_ext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_ext());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CaptureMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureMetadata::GetClassData() const { return &_class_data_; }


void CaptureMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CaptureMetadata*>(&to_msg);
  auto& from = static_cast<const CaptureMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.CaptureMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_org_id().empty()) {
    _this->_internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_location_id().empty()) {
    _this->_internal_set_location_id(from._internal_location_id());
  }
  if (!from._internal_robot_name().empty()) {
    _this->_internal_set_robot_name(from._internal_robot_name());
  }
  if (!from._internal_robot_id().empty()) {
    _this->_internal_set_robot_id(from._internal_robot_id());
  }
  if (!from._internal_part_name().empty()) {
    _this->_internal_set_part_name(from._internal_part_name());
  }
  if (!from._internal_part_id().empty()) {
    _this->_internal_set_part_id(from._internal_part_id());
  }
  if (!from._internal_component_type().empty()) {
    _this->_internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_model().empty()) {
    _this->_internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_ext().empty()) {
    _this->_internal_set_file_ext(from._internal_file_ext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureMetadata::CopyFrom(const CaptureMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.CaptureMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureMetadata::IsInitialized() const {
  return true;
}

void CaptureMetadata::InternalSwap(CaptureMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.method_parameters_.InternalSwap(&other->_impl_.method_parameters_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.org_id_, lhs_arena,
      &other->_impl_.org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_id_, lhs_arena,
      &other->_impl_.location_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_name_, lhs_arena,
      &other->_impl_.robot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_id_, lhs_arena,
      &other->_impl_.robot_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_name_, lhs_arena,
      &other->_impl_.part_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_id_, lhs_arena,
      &other->_impl_.part_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_type_, lhs_arena,
      &other->_impl_.component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_model_, lhs_arena,
      &other->_impl_.component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_ext_, lhs_arena,
      &other->_impl_.file_ext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[3]);
}

// ===================================================================

class CaptureInterval::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start(const CaptureInterval* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end(const CaptureInterval* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CaptureInterval::_Internal::start(const CaptureInterval* msg) {
  return *msg->_impl_.start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CaptureInterval::_Internal::end(const CaptureInterval* msg) {
  return *msg->_impl_.end_;
}
void CaptureInterval::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
void CaptureInterval::clear_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
}
CaptureInterval::CaptureInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.CaptureInterval)
}
CaptureInterval::CaptureInterval(const CaptureInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CaptureInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.CaptureInterval)
}

inline void CaptureInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CaptureInterval::~CaptureInterval() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.CaptureInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void CaptureInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptureInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.CaptureInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1 [json_name = "start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 2 [json_name = "end"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.CaptureInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  if (this->_internal_has_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.CaptureInterval)
  return target;
}

size_t CaptureInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.CaptureInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_);
  }

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CaptureInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureInterval::GetClassData() const { return &_class_data_; }


void CaptureInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CaptureInterval*>(&to_msg);
  auto& from = static_cast<const CaptureInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.CaptureInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _this->_internal_mutable_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start());
  }
  if (from._internal_has_end()) {
    _this->_internal_mutable_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureInterval::CopyFrom(const CaptureInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.CaptureInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureInterval::IsInitialized() const {
  return true;
}

void CaptureInterval::InternalSwap(CaptureInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureInterval, _impl_.end_)
      + sizeof(CaptureInterval::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(CaptureInterval, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[4]);
}

// ===================================================================

class TabularDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::DataRequest& data_request(const TabularDataByFilterRequest* msg);
};

const ::viam::app::data::v1::DataRequest&
TabularDataByFilterRequest::_Internal::data_request(const TabularDataByFilterRequest* msg) {
  return *msg->_impl_.data_request_;
}
TabularDataByFilterRequest::TabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.TabularDataByFilterRequest)
}
TabularDataByFilterRequest::TabularDataByFilterRequest(const TabularDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabularDataByFilterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_request_){nullptr}
    , decltype(_impl_.count_only_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_request()) {
    _this->_impl_.data_request_ = new ::viam::app::data::v1::DataRequest(*from._impl_.data_request_);
  }
  _this->_impl_.count_only_ = from._impl_.count_only_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.TabularDataByFilterRequest)
}

inline void TabularDataByFilterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_request_){nullptr}
    , decltype(_impl_.count_only_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TabularDataByFilterRequest::~TabularDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.TabularDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabularDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_request_;
}

void TabularDataByFilterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabularDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.TabularDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_request_ != nullptr) {
    delete _impl_.data_request_;
  }
  _impl_.data_request_ = nullptr;
  _impl_.count_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool count_only = 2 [json_name = "countOnly"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.TabularDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data_request(this),
        _Internal::data_request(this).GetCachedSize(), target, stream);
  }

  // bool count_only = 2 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_count_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.TabularDataByFilterRequest)
  return target;
}

size_t TabularDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.TabularDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_request_);
  }

  // bool count_only = 2 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabularDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularDataByFilterRequest::GetClassData() const { return &_class_data_; }


void TabularDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabularDataByFilterRequest*>(&to_msg);
  auto& from = static_cast<const TabularDataByFilterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.TabularDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_request()) {
    _this->_internal_mutable_data_request()->::viam::app::data::v1::DataRequest::MergeFrom(
        from._internal_data_request());
  }
  if (from._internal_count_only() != 0) {
    _this->_internal_set_count_only(from._internal_count_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularDataByFilterRequest::CopyFrom(const TabularDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.TabularDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularDataByFilterRequest::IsInitialized() const {
  return true;
}

void TabularDataByFilterRequest::InternalSwap(TabularDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabularDataByFilterRequest, _impl_.count_only_)
      + sizeof(TabularDataByFilterRequest::_impl_.count_only_)
      - PROTOBUF_FIELD_OFFSET(TabularDataByFilterRequest, _impl_.data_request_)>(
          reinterpret_cast<char*>(&_impl_.data_request_),
          reinterpret_cast<char*>(&other->_impl_.data_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[5]);
}

// ===================================================================

class TabularDataByFilterResponse::_Internal {
 public:
};

TabularDataByFilterResponse::TabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.TabularDataByFilterResponse)
}
TabularDataByFilterResponse::TabularDataByFilterResponse(const TabularDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabularDataByFilterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.TabularDataByFilterResponse)
}

inline void TabularDataByFilterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){arena}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TabularDataByFilterResponse::~TabularDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.TabularDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabularDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.data_.~RepeatedPtrField();
}

void TabularDataByFilterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabularDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.TabularDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.data_.Clear();
  _impl_.count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 count = 3 [json_name = "count"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.TabularDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.TabularDataByFilterResponse)
  return target;
}

size_t TabularDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.TabularDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabularDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularDataByFilterResponse::GetClassData() const { return &_class_data_; }


void TabularDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabularDataByFilterResponse*>(&to_msg);
  auto& from = static_cast<const TabularDataByFilterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.TabularDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularDataByFilterResponse::CopyFrom(const TabularDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.TabularDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularDataByFilterResponse::IsInitialized() const {
  return true;
}

void TabularDataByFilterResponse::InternalSwap(TabularDataByFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[6]);
}

// ===================================================================

class TabularData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& data(const TabularData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested(const TabularData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received(const TabularData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TabularData::_Internal::data(const TabularData* msg) {
  return *msg->_impl_.data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TabularData::_Internal::time_requested(const TabularData* msg) {
  return *msg->_impl_.time_requested_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TabularData::_Internal::time_received(const TabularData* msg) {
  return *msg->_impl_.time_received_;
}
void TabularData::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
void TabularData::clear_time_requested() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_requested_ != nullptr) {
    delete _impl_.time_requested_;
  }
  _impl_.time_requested_ = nullptr;
}
void TabularData::clear_time_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_received_ != nullptr) {
    delete _impl_.time_received_;
  }
  _impl_.time_received_ = nullptr;
}
TabularData::TabularData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.TabularData)
}
TabularData::TabularData(const TabularData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabularData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.time_requested_){nullptr}
    , decltype(_impl_.time_received_){nullptr}
    , decltype(_impl_.metadata_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.data_);
  }
  if (from._internal_has_time_requested()) {
    _this->_impl_.time_requested_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_requested_);
  }
  if (from._internal_has_time_received()) {
    _this->_impl_.time_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_received_);
  }
  _this->_impl_.metadata_index_ = from._impl_.metadata_index_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.TabularData)
}

inline void TabularData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.time_requested_){nullptr}
    , decltype(_impl_.time_received_){nullptr}
    , decltype(_impl_.metadata_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TabularData::~TabularData() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.TabularData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabularData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.time_requested_;
  if (this != internal_default_instance()) delete _impl_.time_received_;
}

void TabularData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabularData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.TabularData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_requested_ != nullptr) {
    delete _impl_.time_requested_;
  }
  _impl_.time_requested_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_received_ != nullptr) {
    delete _impl_.time_received_;
  }
  _impl_.time_received_ = nullptr;
  _impl_.metadata_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 metadata_index = 2 [json_name = "metadataIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.metadata_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_requested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.TabularData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct data = 1 [json_name = "data"];
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // int32 metadata_index = 2 [json_name = "metadataIndex"];
  if (this->_internal_metadata_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_metadata_index(), target);
  }

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_requested(this),
        _Internal::time_requested(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time_received(this),
        _Internal::time_received(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.TabularData)
  return target;
}

size_t TabularData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.TabularData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct data = 1 [json_name = "data"];
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_requested_);
  }

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_received_);
  }

  // int32 metadata_index = 2 [json_name = "metadataIndex"];
  if (this->_internal_metadata_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_metadata_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabularData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularData::GetClassData() const { return &_class_data_; }


void TabularData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabularData*>(&to_msg);
  auto& from = static_cast<const TabularData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.TabularData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_time_requested()) {
    _this->_internal_mutable_time_requested()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_requested());
  }
  if (from._internal_has_time_received()) {
    _this->_internal_mutable_time_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_received());
  }
  if (from._internal_metadata_index() != 0) {
    _this->_internal_set_metadata_index(from._internal_metadata_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularData::CopyFrom(const TabularData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.TabularData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularData::IsInitialized() const {
  return true;
}

void TabularData::InternalSwap(TabularData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabularData, _impl_.metadata_index_)
      + sizeof(TabularData::_impl_.metadata_index_)
      - PROTOBUF_FIELD_OFFSET(TabularData, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[7]);
}

// ===================================================================

class BinaryData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested(const BinaryData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received(const BinaryData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BinaryData::_Internal::time_requested(const BinaryData* msg) {
  return *msg->_impl_.time_requested_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BinaryData::_Internal::time_received(const BinaryData* msg) {
  return *msg->_impl_.time_received_;
}
void BinaryData::clear_time_requested() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_requested_ != nullptr) {
    delete _impl_.time_requested_;
  }
  _impl_.time_requested_ = nullptr;
}
void BinaryData::clear_time_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_received_ != nullptr) {
    delete _impl_.time_received_;
  }
  _impl_.time_received_ = nullptr;
}
BinaryData::BinaryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryData)
}
BinaryData::BinaryData(const BinaryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.binary_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.time_requested_){nullptr}
    , decltype(_impl_.time_received_){nullptr}
    , decltype(_impl_.metadata_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binary().empty()) {
    _this->_impl_.binary_.Set(from._internal_binary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time_requested()) {
    _this->_impl_.time_requested_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_requested_);
  }
  if (from._internal_has_time_received()) {
    _this->_impl_.time_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_received_);
  }
  _this->_impl_.metadata_index_ = from._impl_.metadata_index_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryData)
}

inline void BinaryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.binary_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.time_requested_){nullptr}
    , decltype(_impl_.time_received_){nullptr}
    , decltype(_impl_.metadata_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryData::~BinaryData() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.uri_.Destroy();
  _impl_.binary_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_requested_;
  if (this != internal_default_instance()) delete _impl_.time_received_;
}

void BinaryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _impl_.binary_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_requested_ != nullptr) {
    delete _impl_.time_requested_;
  }
  _impl_.time_requested_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_received_ != nullptr) {
    delete _impl_.time_received_;
  }
  _impl_.time_received_ = nullptr;
  _impl_.metadata_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryData.id"));
        } else
          goto handle_unusual;
        continue;
      // string uri = 2 [json_name = "uri"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryData.uri"));
        } else
          goto handle_unusual;
        continue;
      // bytes binary = 3 [json_name = "binary"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 metadata_index = 4 [json_name = "metadataIndex"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.metadata_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_requested = 5 [json_name = "timeRequested"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_requested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_received = 6 [json_name = "timeReceived"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 7 [json_name = "name"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryData.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string uri = 2 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryData.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // bytes binary = 3 [json_name = "binary"];
  if (!this->_internal_binary().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_binary(), target);
  }

  // int32 metadata_index = 4 [json_name = "metadataIndex"];
  if (this->_internal_metadata_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_metadata_index(), target);
  }

  // .google.protobuf.Timestamp time_requested = 5 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::time_requested(this),
        _Internal::time_requested(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_received = 6 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time_received(this),
        _Internal::time_received(this).GetCachedSize(), target, stream);
  }

  // string name = 7 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryData.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryData)
  return target;
}

size_t BinaryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string uri = 2 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // bytes binary = 3 [json_name = "binary"];
  if (!this->_internal_binary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_binary());
  }

  // string name = 7 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp time_requested = 5 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_requested_);
  }

  // .google.protobuf.Timestamp time_received = 6 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_received_);
  }

  // int32 metadata_index = 4 [json_name = "metadataIndex"];
  if (this->_internal_metadata_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_metadata_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryData::GetClassData() const { return &_class_data_; }


void BinaryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryData*>(&to_msg);
  auto& from = static_cast<const BinaryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_binary().empty()) {
    _this->_internal_set_binary(from._internal_binary());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_time_requested()) {
    _this->_internal_mutable_time_requested()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_requested());
  }
  if (from._internal_has_time_received()) {
    _this->_internal_mutable_time_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_received());
  }
  if (from._internal_metadata_index() != 0) {
    _this->_internal_set_metadata_index(from._internal_metadata_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryData::CopyFrom(const BinaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryData::IsInitialized() const {
  return true;
}

void BinaryData::InternalSwap(BinaryData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.binary_, lhs_arena,
      &other->_impl_.binary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryData, _impl_.metadata_index_)
      + sizeof(BinaryData::_impl_.metadata_index_)
      - PROTOBUF_FIELD_OFFSET(BinaryData, _impl_.time_requested_)>(
          reinterpret_cast<char*>(&_impl_.time_requested_),
          reinterpret_cast<char*>(&other->_impl_.time_requested_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[8]);
}

// ===================================================================

class BinaryDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::DataRequest& data_request(const BinaryDataByFilterRequest* msg);
};

const ::viam::app::data::v1::DataRequest&
BinaryDataByFilterRequest::_Internal::data_request(const BinaryDataByFilterRequest* msg) {
  return *msg->_impl_.data_request_;
}
BinaryDataByFilterRequest::BinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByFilterRequest)
}
BinaryDataByFilterRequest::BinaryDataByFilterRequest(const BinaryDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryDataByFilterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_request_){nullptr}
    , decltype(_impl_.include_binary_){}
    , decltype(_impl_.count_only_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_request()) {
    _this->_impl_.data_request_ = new ::viam::app::data::v1::DataRequest(*from._impl_.data_request_);
  }
  ::memcpy(&_impl_.include_binary_, &from._impl_.include_binary_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_only_) -
    reinterpret_cast<char*>(&_impl_.include_binary_)) + sizeof(_impl_.count_only_));
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByFilterRequest)
}

inline void BinaryDataByFilterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_request_){nullptr}
    , decltype(_impl_.include_binary_){false}
    , decltype(_impl_.count_only_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinaryDataByFilterRequest::~BinaryDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_request_;
}

void BinaryDataByFilterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_request_ != nullptr) {
    delete _impl_.data_request_;
  }
  _impl_.data_request_ = nullptr;
  ::memset(&_impl_.include_binary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_only_) -
      reinterpret_cast<char*>(&_impl_.include_binary_)) + sizeof(_impl_.count_only_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_binary = 2 [json_name = "includeBinary"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool count_only = 3 [json_name = "countOnly"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data_request(this),
        _Internal::data_request(this).GetCachedSize(), target, stream);
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_binary(), target);
  }

  // bool count_only = 3 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_count_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByFilterRequest)
  return target;
}

size_t BinaryDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_request_);
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    total_size += 1 + 1;
  }

  // bool count_only = 3 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByFilterRequest::GetClassData() const { return &_class_data_; }


void BinaryDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryDataByFilterRequest*>(&to_msg);
  auto& from = static_cast<const BinaryDataByFilterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_request()) {
    _this->_internal_mutable_data_request()->::viam::app::data::v1::DataRequest::MergeFrom(
        from._internal_data_request());
  }
  if (from._internal_include_binary() != 0) {
    _this->_internal_set_include_binary(from._internal_include_binary());
  }
  if (from._internal_count_only() != 0) {
    _this->_internal_set_count_only(from._internal_count_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByFilterRequest::CopyFrom(const BinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByFilterRequest::IsInitialized() const {
  return true;
}

void BinaryDataByFilterRequest::InternalSwap(BinaryDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryDataByFilterRequest, _impl_.count_only_)
      + sizeof(BinaryDataByFilterRequest::_impl_.count_only_)
      - PROTOBUF_FIELD_OFFSET(BinaryDataByFilterRequest, _impl_.data_request_)>(
          reinterpret_cast<char*>(&_impl_.data_request_),
          reinterpret_cast<char*>(&other->_impl_.data_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[9]);
}

// ===================================================================

class BinaryDataByFilterResponse::_Internal {
 public:
};

BinaryDataByFilterResponse::BinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByFilterResponse)
}
BinaryDataByFilterResponse::BinaryDataByFilterResponse(const BinaryDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryDataByFilterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByFilterResponse)
}

inline void BinaryDataByFilterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){arena}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinaryDataByFilterResponse::~BinaryDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.data_.~RepeatedPtrField();
}

void BinaryDataByFilterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.data_.Clear();
  _impl_.count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 count = 3 [json_name = "count"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByFilterResponse)
  return target;
}

size_t BinaryDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByFilterResponse::GetClassData() const { return &_class_data_; }


void BinaryDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryDataByFilterResponse*>(&to_msg);
  auto& from = static_cast<const BinaryDataByFilterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByFilterResponse::CopyFrom(const BinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByFilterResponse::IsInitialized() const {
  return true;
}

void BinaryDataByFilterResponse::InternalSwap(BinaryDataByFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[10]);
}

// ===================================================================

class BinaryDataByIDsRequest::_Internal {
 public:
};

BinaryDataByIDsRequest::BinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByIDsRequest)
}
BinaryDataByIDsRequest::BinaryDataByIDsRequest(const BinaryDataByIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryDataByIDsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_ids_){from._impl_.file_ids_}
    , decltype(_impl_.include_binary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.include_binary_ = from._impl_.include_binary_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByIDsRequest)
}

inline void BinaryDataByIDsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_ids_){arena}
    , decltype(_impl_.include_binary_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinaryDataByIDsRequest::~BinaryDataByIDsRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByIDsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_ids_.~RepeatedPtrField();
}

void BinaryDataByIDsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryDataByIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByIDsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_ids_.Clear();
  _impl_.include_binary_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByIDsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string file_ids = 1 [json_name = "fileIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryDataByIDsRequest.file_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool include_binary = 2 [json_name = "includeBinary"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByIDsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByIDsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  for (int i = 0, n = this->_internal_file_ids_size(); i < n; i++) {
    const auto& s = this->_internal_file_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryDataByIDsRequest.file_ids");
    target = stream->WriteString(1, s, target);
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByIDsRequest)
  return target;
}

size_t BinaryDataByIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByIDsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.file_ids_.size());
  for (int i = 0, n = _impl_.file_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.file_ids_.Get(i));
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryDataByIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByIDsRequest::GetClassData() const { return &_class_data_; }


void BinaryDataByIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryDataByIDsRequest*>(&to_msg);
  auto& from = static_cast<const BinaryDataByIDsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByIDsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_ids_.MergeFrom(from._impl_.file_ids_);
  if (from._internal_include_binary() != 0) {
    _this->_internal_set_include_binary(from._internal_include_binary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByIDsRequest::CopyFrom(const BinaryDataByIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByIDsRequest::IsInitialized() const {
  return true;
}

void BinaryDataByIDsRequest::InternalSwap(BinaryDataByIDsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_ids_.InternalSwap(&other->_impl_.file_ids_);
  swap(_impl_.include_binary_, other->_impl_.include_binary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByIDsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[11]);
}

// ===================================================================

class BinaryDataByIDsResponse::_Internal {
 public:
};

BinaryDataByIDsResponse::BinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByIDsResponse)
}
BinaryDataByIDsResponse::BinaryDataByIDsResponse(const BinaryDataByIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryDataByIDsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByIDsResponse)
}

inline void BinaryDataByIDsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){arena}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinaryDataByIDsResponse::~BinaryDataByIDsResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByIDsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
  _impl_.data_.~RepeatedPtrField();
}

void BinaryDataByIDsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryDataByIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByIDsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.data_.Clear();
  _impl_.count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByIDsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 count = 3 [json_name = "count"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByIDsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByIDsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByIDsResponse)
  return target;
}

size_t BinaryDataByIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByIDsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_impl_.metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.data.v1.BinaryData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByIDsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryDataByIDsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByIDsResponse::GetClassData() const { return &_class_data_; }


void BinaryDataByIDsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryDataByIDsResponse*>(&to_msg);
  auto& from = static_cast<const BinaryDataByIDsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByIDsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByIDsResponse::CopyFrom(const BinaryDataByIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByIDsResponse::IsInitialized() const {
  return true;
}

void BinaryDataByIDsResponse::InternalSwap(BinaryDataByIDsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByIDsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DataRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::Filter*
Arena::CreateMaybeMessage< ::viam::app::data::v1::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::CaptureMetadata*
Arena::CreateMaybeMessage< ::viam::app::data::v1::CaptureMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::CaptureMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::CaptureInterval*
Arena::CreateMaybeMessage< ::viam::app::data::v1::CaptureInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::CaptureInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::TabularDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::TabularDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::TabularDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::TabularDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::TabularDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::TabularDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::TabularData*
Arena::CreateMaybeMessage< ::viam::app::data::v1::TabularData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::TabularData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryData*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByIDsRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByIDsResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByIDsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
