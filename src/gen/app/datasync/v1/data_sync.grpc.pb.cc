// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/datasync/v1/data_sync.proto

#include "app/datasync/v1/data_sync.pb.h"
#include "app/datasync/v1/data_sync.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace app {
namespace datasync {
namespace v1 {

static const char* DataSyncService_method_names[] = {
  "/viam.app.datasync.v1.DataSyncService/Upload",
};

std::unique_ptr< DataSyncService::Stub> DataSyncService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataSyncService::Stub> stub(new DataSyncService::Stub(channel, options));
  return stub;
}

DataSyncService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(DataSyncService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>* DataSyncService::Stub::UploadRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>::Create(channel_.get(), rpcmethod_Upload_, context);
}

void DataSyncService::Stub::async::Upload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::viam::app::datasync::v1::UploadRequest,::viam::app::datasync::v1::UploadResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::viam::app::datasync::v1::UploadRequest,::viam::app::datasync::v1::UploadResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>* DataSyncService::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>::Create(channel_.get(), cq, rpcmethod_Upload_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>* DataSyncService::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>::Create(channel_.get(), cq, rpcmethod_Upload_, context, false, nullptr);
}

DataSyncService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataSyncService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< DataSyncService::Service, ::viam::app::datasync::v1::UploadRequest, ::viam::app::datasync::v1::UploadResponse>(
          [](DataSyncService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::viam::app::datasync::v1::UploadResponse,
             ::viam::app::datasync::v1::UploadRequest>* stream) {
               return service->Upload(ctx, stream);
             }, this)));
}

DataSyncService::Service::~Service() {
}

::grpc::Status DataSyncService::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::viam::app::datasync::v1::UploadResponse, ::viam::app::datasync::v1::UploadRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace app
}  // namespace datasync
}  // namespace v1

