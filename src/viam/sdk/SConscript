# -*- mode: python; -*-

Import(["env"])

env = env.Clone()


def lvru_system_name_gen(target, source, env, for_signature):
    if env.subst("$HOST_OS") == "darwin":
        return "macosx"
    return "$HOST_OS"


env.Command(
    target="${LIBPREFIX}viam_rust_utils${LIBSUFFIX}",
    source=env.WhereIs("curl"),
    action="$SOURCE -s -L https://github.com/viamrobotics/rust-utils/releases/latest/download/${LIBPREFIX}viam_rust_utils-${LVRU_SYSTEM_NAME}_${HOST_ARCH}${LIBSUFFIX} -o $TARGET",
    LVRU_SYSTEM_NAME=lvru_system_name_gen,
)

# Search cwd for the libviam_rust_utils static library we pulled down.
env = env.Clone()
env.AppendUnique(
    LIBPATH=".",
)

if env.subst("$HOST_OS") == "darwin":
    env.AppendUnique(FRAMEWORKS=["CoreFoundation", "Security"])

libviamsdk = env.SharedLibrary(
    target="viamsdk",
    source=[
        "registry/registry.cpp",  # Note: Must be first for bad link order reasons
        "common/client_helper.cpp",
        "common/linear_algebra.cpp",
        "common/pose.cpp",
        "common/proto_type.cpp",
        "common/service_helper.cpp",
        "common/utils.cpp",
        "common/world_state.cpp",
        "components/base/base.cpp",
        "components/base/client.cpp",
        "components/base/server.cpp",
        "components/board/board.cpp",
        "components/board/client.cpp",
        "components/board/server.cpp",
        "components/camera/camera.cpp",
        "components/camera/client.cpp",
        "components/camera/server.cpp",
        "components/component.cpp",
        "components/encoder/client.cpp",
        "components/encoder/encoder.cpp",
        "components/encoder/server.cpp",
        "components/generic/client.cpp",
        "components/generic/generic.cpp",
        "components/generic/server.cpp",
        "components/motor/motor.cpp",
        "components/motor/client.cpp",
        "components/motor/server.cpp",
        "components/movement_sensor/client.cpp",
        "components/movement_sensor/movement_sensor.cpp",
        "components/movement_sensor/server.cpp",
        "components/power_sensor/client.cpp",
        "components/power_sensor/power_sensor.cpp",
        "components/power_sensor/server.cpp",
        "components/sensor/client.cpp",
        "components/sensor/sensor.cpp",
        "components/sensor/server.cpp",
        "config/resource.cpp",
        "module/handler_map.cpp",
        "module/module.cpp",
        "module/service.cpp",
        "module/signal_manager.cpp",
        "referenceframe/frame.cpp",
        "resource/resource.cpp",
        "resource/resource_api.cpp",
        "resource/resource_manager.cpp",
        "resource/resource_server_base.cpp",
        "resource/stoppable.cpp",
        "robot/client.cpp",
        "robot/service.cpp",
        "rpc/dial.cpp",
        "rpc/server.cpp",
        "services/mlmodel/client.cpp",
        "services/mlmodel/mlmodel.cpp",
        "services/mlmodel/private/proto.cpp",
        "services/mlmodel/server.cpp",
        "services/motion/client.cpp",
        "services/motion/motion.cpp",
        "services/motion/server.cpp",
        "services/service.cpp",
        "spatialmath/geometry.cpp",
        "spatialmath/orientation_types.cpp",
        "spatialmath/orientation.cpp",
    ],
    api_headers=[
        "common/client_helper.hpp",
        "common/linear_algebra.hpp",
        "common/pose.hpp",
        "common/proto_type.hpp",
        "common/service_helper.hpp",
        "common/utils.hpp",
        "common/world_state.hpp",
        "components/base/base.hpp",
        "components/base/client.hpp",
        "components/base/server.hpp",
        "components/board/board.hpp",
        "components/board/client.hpp",
        "components/board/server.hpp",
        "components/camera/camera.hpp",
        "components/camera/client.hpp",
        "components/camera/server.hpp",
        "components/component.hpp",
        "components/encoder/client.hpp",
        "components/encoder/encoder.hpp",
        "components/encoder/server.hpp",
        "components/generic/client.hpp",
        "components/generic/generic.hpp",
        "components/generic/server.hpp",
        "components/motor/motor.hpp",
        "components/motor/client.hpp",
        "components/motor/server.hpp",
        "components/movement_sensor/client.hpp",
        "components/movement_sensor/movement_sensor.hpp",
        "components/movement_sensor/server.hpp",
        "components/power_sensor/client.hpp",
        "components/power_sensor/power_sensor.hpp",
        "components/power_sensor/server.hpp",
        "components/sensor/client.hpp",
        "components/sensor/sensor.hpp",
        "components/sensor/server.hpp",
        "config/resource.hpp",
        "module/handler_map.hpp",
        "module/module.hpp",
        "module/service.hpp",
        "module/signal_manager.hpp",
        "referenceframe/frame.hpp",
        "registry/registry.hpp",
        "resource/resource.hpp",
        "resource/resource_api.hpp",
        "resource/resource_manager.hpp",
        "resource/resource_server_base.hpp",
        "resource/stoppable.hpp",
        "robot/client.hpp",
        "robot/service.hpp",
        "rpc/dial.hpp",
        "rpc/server.hpp",
        "services/mlmodel/client.hpp",
        "services/mlmodel/mlmodel.hpp",
        "services/mlmodel/server.hpp",
        "services/motion/client.hpp",
        "services/motion/motion.hpp",
        "services/motion/server.hpp",
        "services/service.hpp",
        "spatialmath/geometry.hpp",
        "spatialmath/orientation_types.hpp",
        "spatialmath/orientation.hpp",
    ],
    LIBS=[
        "absl_cord",
        "absl_cord_internal",
        "absl_cordz_info",
        "absl_hash",
        "absl_log_internal_check_op",
        "absl_log_internal_message",
        "absl_log_internal_nullguard",
        "boost_log-mt",
        "gpr",
        "grpc",
        "grpc++",
        "grpc++_reflection",
        "protobuf",
        "viam_rust_utils",
        "viamapi",
    ],
)

libviamsdk_install = env.Install(
    target="$DEST_DIR/$PREFIX_LIB_DIR",
    source=libviamsdk,
)
env.Alias("install", [libviamsdk_install])

env = env.Clone(HEADER_ROOT=env.Dir("../..").srcnode())
for header in env.File(libviamsdk[0].get_build_env()["api_headers"]):
    header_install = env.Install(
        target=env.subst(
            "$DEST_DIR/$PREFIX_INCLUDE_DIR/${HEADER_ROOT.rel_path(SOURCE.dir)}",
            source=header,
        ),
        source=header,
    )
    env.Alias("install", header_install)
